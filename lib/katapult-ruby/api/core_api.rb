=begin
#Katapult Core API

#Welcome to the documentation for the Katapult Core API

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.1.0

=end

require 'cgi'

module KatapultAPI
  class CoreApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param [Hash] opts the optional parameters
    # @option opts [DeleteDiskBackupPolicyRequest] :delete_disk_backup_policy_request 
    # @return [DeleteDiskBackupPolicy200Response]
    def delete_disk_backup_policy(opts = {})
      data, _status_code, _headers = delete_disk_backup_policy_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteDiskBackupPolicyRequest] :delete_disk_backup_policy_request 
    # @return [Array<(DeleteDiskBackupPolicy200Response, Integer, Hash)>] DeleteDiskBackupPolicy200Response data, response status code and response headers
    def delete_disk_backup_policy_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.delete_disk_backup_policy ...'
      end
      # resource path
      local_var_path = '/disk_backup_policies/:disk_backup_policy'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'delete_disk_backup_policy_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteDiskBackupPolicy200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.delete_disk_backup_policy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#delete_disk_backup_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteDiskBackupPolicyScheduleRequest] :delete_disk_backup_policy_schedule_request 
    # @return [DeleteDiskBackupPolicySchedule200Response]
    def delete_disk_backup_policy_schedule(opts = {})
      data, _status_code, _headers = delete_disk_backup_policy_schedule_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteDiskBackupPolicyScheduleRequest] :delete_disk_backup_policy_schedule_request 
    # @return [Array<(DeleteDiskBackupPolicySchedule200Response, Integer, Hash)>] DeleteDiskBackupPolicySchedule200Response data, response status code and response headers
    def delete_disk_backup_policy_schedule_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.delete_disk_backup_policy_schedule ...'
      end
      # resource path
      local_var_path = '/disk_backup_policies/:disk_backup_policy/schedule'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'delete_disk_backup_policy_schedule_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteDiskBackupPolicySchedule200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.delete_disk_backup_policy_schedule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#delete_disk_backup_policy_schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteDnsRecordsDnsRecordRequest] :delete_dns_records_dns_record_request 
    # @return [DeleteDnsZone200Response]
    def delete_dns_record(opts = {})
      data, _status_code, _headers = delete_dns_record_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteDnsRecordsDnsRecordRequest] :delete_dns_records_dns_record_request 
    # @return [Array<(DeleteDnsZone200Response, Integer, Hash)>] DeleteDnsZone200Response data, response status code and response headers
    def delete_dns_record_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.delete_dns_record ...'
      end
      # resource path
      local_var_path = '/dns_records/:dns_record'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'delete_dns_records_dns_record_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteDnsZone200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.delete_dns_record",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#delete_dns_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteDnsRecordsDnsRecordRequest] :delete_dns_records_dns_record_request 
    # @return [DeleteDnsRecordsDnsRecord200Response]
    def delete_dns_records_dns_record(opts = {})
      data, _status_code, _headers = delete_dns_records_dns_record_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteDnsRecordsDnsRecordRequest] :delete_dns_records_dns_record_request 
    # @return [Array<(DeleteDnsRecordsDnsRecord200Response, Integer, Hash)>] DeleteDnsRecordsDnsRecord200Response data, response status code and response headers
    def delete_dns_records_dns_record_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.delete_dns_records_dns_record ...'
      end
      # resource path
      local_var_path = '/dns/records/:dns_record'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'delete_dns_records_dns_record_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteDnsRecordsDnsRecord200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.delete_dns_records_dns_record",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#delete_dns_records_dns_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteDnsZonesDnsZoneRequest] :delete_dns_zones_dns_zone_request 
    # @return [DeleteDnsZone200Response]
    def delete_dns_zone(opts = {})
      data, _status_code, _headers = delete_dns_zone_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteDnsZonesDnsZoneRequest] :delete_dns_zones_dns_zone_request 
    # @return [Array<(DeleteDnsZone200Response, Integer, Hash)>] DeleteDnsZone200Response data, response status code and response headers
    def delete_dns_zone_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.delete_dns_zone ...'
      end
      # resource path
      local_var_path = '/dns_zones/:dns_zone'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'delete_dns_zones_dns_zone_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteDnsZone200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.delete_dns_zone",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#delete_dns_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteDnsZonesDnsZoneRequest] :delete_dns_zones_dns_zone_request 
    # @return [DeleteDnsZonesDnsZone200Response]
    def delete_dns_zones_dns_zone(opts = {})
      data, _status_code, _headers = delete_dns_zones_dns_zone_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteDnsZonesDnsZoneRequest] :delete_dns_zones_dns_zone_request 
    # @return [Array<(DeleteDnsZonesDnsZone200Response, Integer, Hash)>] DeleteDnsZonesDnsZone200Response data, response status code and response headers
    def delete_dns_zones_dns_zone_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.delete_dns_zones_dns_zone ...'
      end
      # resource path
      local_var_path = '/dns/zones/:dns_zone'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'delete_dns_zones_dns_zone_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteDnsZonesDnsZone200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.delete_dns_zones_dns_zone",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#delete_dns_zones_dns_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteFileStorageVolumeRequest] :delete_file_storage_volume_request 
    # @return [DeleteFileStorageVolume200Response]
    def delete_file_storage_volume(opts = {})
      data, _status_code, _headers = delete_file_storage_volume_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteFileStorageVolumeRequest] :delete_file_storage_volume_request 
    # @return [Array<(DeleteFileStorageVolume200Response, Integer, Hash)>] DeleteFileStorageVolume200Response data, response status code and response headers
    def delete_file_storage_volume_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.delete_file_storage_volume ...'
      end
      # resource path
      local_var_path = '/file_storage_volumes/:file_storage_volume'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'delete_file_storage_volume_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteFileStorageVolume200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.delete_file_storage_volume",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#delete_file_storage_volume\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteIpAddressRequest] :delete_ip_address_request 
    # @return [Object]
    def delete_ip_address(opts = {})
      data, _status_code, _headers = delete_ip_address_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteIpAddressRequest] :delete_ip_address_request 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_ip_address_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.delete_ip_address ...'
      end
      # resource path
      local_var_path = '/ip_addresses/:ip_address'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'delete_ip_address_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.delete_ip_address",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#delete_ip_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteLoadBalancerRequest] :delete_load_balancer_request 
    # @return [DeleteLoadBalancer200Response]
    def delete_load_balancer(opts = {})
      data, _status_code, _headers = delete_load_balancer_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteLoadBalancerRequest] :delete_load_balancer_request 
    # @return [Array<(DeleteLoadBalancer200Response, Integer, Hash)>] DeleteLoadBalancer200Response data, response status code and response headers
    def delete_load_balancer_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.delete_load_balancer ...'
      end
      # resource path
      local_var_path = '/load_balancers/:load_balancer'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'delete_load_balancer_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteLoadBalancer200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.delete_load_balancer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#delete_load_balancer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteLoadBalancersRulesLoadBalancerRuleRequest] :delete_load_balancers_rules_load_balancer_rule_request 
    # @return [DeleteLoadBalancersRulesLoadBalancerRule200Response]
    def delete_load_balancers_rules_load_balancer_rule(opts = {})
      data, _status_code, _headers = delete_load_balancers_rules_load_balancer_rule_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteLoadBalancersRulesLoadBalancerRuleRequest] :delete_load_balancers_rules_load_balancer_rule_request 
    # @return [Array<(DeleteLoadBalancersRulesLoadBalancerRule200Response, Integer, Hash)>] DeleteLoadBalancersRulesLoadBalancerRule200Response data, response status code and response headers
    def delete_load_balancers_rules_load_balancer_rule_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.delete_load_balancers_rules_load_balancer_rule ...'
      end
      # resource path
      local_var_path = '/load_balancers/rules/:load_balancer_rule'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'delete_load_balancers_rules_load_balancer_rule_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteLoadBalancersRulesLoadBalancerRule200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.delete_load_balancers_rules_load_balancer_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#delete_load_balancers_rules_load_balancer_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteSecurityGroupRequest] :delete_security_group_request 
    # @return [DeleteSecurityGroup200Response]
    def delete_security_group(opts = {})
      data, _status_code, _headers = delete_security_group_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteSecurityGroupRequest] :delete_security_group_request 
    # @return [Array<(DeleteSecurityGroup200Response, Integer, Hash)>] DeleteSecurityGroup200Response data, response status code and response headers
    def delete_security_group_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.delete_security_group ...'
      end
      # resource path
      local_var_path = '/security_groups/:security_group'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'delete_security_group_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteSecurityGroup200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.delete_security_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#delete_security_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteSecurityGroupsRulesSecurityGroupRuleRequest] :delete_security_groups_rules_security_group_rule_request 
    # @return [DeleteSecurityGroupsRulesSecurityGroupRule200Response]
    def delete_security_groups_rules_security_group_rule(opts = {})
      data, _status_code, _headers = delete_security_groups_rules_security_group_rule_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteSecurityGroupsRulesSecurityGroupRuleRequest] :delete_security_groups_rules_security_group_rule_request 
    # @return [Array<(DeleteSecurityGroupsRulesSecurityGroupRule200Response, Integer, Hash)>] DeleteSecurityGroupsRulesSecurityGroupRule200Response data, response status code and response headers
    def delete_security_groups_rules_security_group_rule_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.delete_security_groups_rules_security_group_rule ...'
      end
      # resource path
      local_var_path = '/security_groups/rules/:security_group_rule'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'delete_security_groups_rules_security_group_rule_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteSecurityGroupsRulesSecurityGroupRule200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.delete_security_groups_rules_security_group_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#delete_security_groups_rules_security_group_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteSshKeyRequest] :delete_ssh_key_request 
    # @return [PostOrganizationSshKeys201Response]
    def delete_ssh_key(opts = {})
      data, _status_code, _headers = delete_ssh_key_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteSshKeyRequest] :delete_ssh_key_request 
    # @return [Array<(PostOrganizationSshKeys201Response, Integer, Hash)>] PostOrganizationSshKeys201Response data, response status code and response headers
    def delete_ssh_key_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.delete_ssh_key ...'
      end
      # resource path
      local_var_path = '/ssh_keys/:ssh_key'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'delete_ssh_key_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostOrganizationSshKeys201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.delete_ssh_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#delete_ssh_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteTagRequest] :delete_tag_request 
    # @return [PostOrganizationTags200Response]
    def delete_tag(opts = {})
      data, _status_code, _headers = delete_tag_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteTagRequest] :delete_tag_request 
    # @return [Array<(PostOrganizationTags200Response, Integer, Hash)>] PostOrganizationTags200Response data, response status code and response headers
    def delete_tag_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.delete_tag ...'
      end
      # resource path
      local_var_path = '/tags/:tag'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'delete_tag_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostOrganizationTags200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.delete_tag",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#delete_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteTrashObjectRequest] :delete_trash_object_request 
    # @return [PutVirtualMachinePackage200Response]
    def delete_trash_object(opts = {})
      data, _status_code, _headers = delete_trash_object_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteTrashObjectRequest] :delete_trash_object_request 
    # @return [Array<(PutVirtualMachinePackage200Response, Integer, Hash)>] PutVirtualMachinePackage200Response data, response status code and response headers
    def delete_trash_object_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.delete_trash_object ...'
      end
      # resource path
      local_var_path = '/trash_objects/:trash_object'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'delete_trash_object_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PutVirtualMachinePackage200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.delete_trash_object",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#delete_trash_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteVirtualMachineRequest] :delete_virtual_machine_request 
    # @return [DeleteVirtualMachine200Response]
    def delete_virtual_machine(opts = {})
      data, _status_code, _headers = delete_virtual_machine_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteVirtualMachineRequest] :delete_virtual_machine_request 
    # @return [Array<(DeleteVirtualMachine200Response, Integer, Hash)>] DeleteVirtualMachine200Response data, response status code and response headers
    def delete_virtual_machine_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.delete_virtual_machine ...'
      end
      # resource path
      local_var_path = '/virtual_machines/:virtual_machine'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'delete_virtual_machine_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteVirtualMachine200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.delete_virtual_machine",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#delete_virtual_machine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteVirtualMachineGroupRequest] :delete_virtual_machine_group_request 
    # @return [PostOrganizationVirtualMachineGroups200Response]
    def delete_virtual_machine_group(opts = {})
      data, _status_code, _headers = delete_virtual_machine_group_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteVirtualMachineGroupRequest] :delete_virtual_machine_group_request 
    # @return [Array<(PostOrganizationVirtualMachineGroups200Response, Integer, Hash)>] PostOrganizationVirtualMachineGroups200Response data, response status code and response headers
    def delete_virtual_machine_group_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.delete_virtual_machine_group ...'
      end
      # resource path
      local_var_path = '/virtual_machine_groups/:virtual_machine_group'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'delete_virtual_machine_group_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostOrganizationVirtualMachineGroups200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.delete_virtual_machine_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#delete_virtual_machine_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :certificate_id All &#39;certificate[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetCertificate200Response]
    def get_certificate(opts = {})
      data, _status_code, _headers = get_certificate_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :certificate_id All &#39;certificate[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetCertificate200Response, Integer, Hash)>] GetCertificate200Response data, response status code and response headers
    def get_certificate_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_certificate ...'
      end
      # resource path
      local_var_path = '/certificates/:certificate'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'certificate[id]'] = opts[:'certificate_id'] if !opts[:'certificate_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetCertificate200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_certificate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [GetCountries200Response]
    def get_countries(opts = {})
      data, _status_code, _headers = get_countries_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [Array<(GetCountries200Response, Integer, Hash)>] GetCountries200Response data, response status code and response headers
    def get_countries_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_countries ...'
      end
      # resource path
      local_var_path = '/countries'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetCountries200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_countries",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_countries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :country_id All &#39;country[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :country_iso_code2 All &#39;country[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :country_iso_code3 All &#39;country[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetCountry200Response]
    def get_country(opts = {})
      data, _status_code, _headers = get_country_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :country_id All &#39;country[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :country_iso_code2 All &#39;country[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :country_iso_code3 All &#39;country[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetCountry200Response, Integer, Hash)>] GetCountry200Response data, response status code and response headers
    def get_country_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_country ...'
      end
      # resource path
      local_var_path = '/countries/:country'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'country[id]'] = opts[:'country_id'] if !opts[:'country_id'].nil?
      query_params[:'country[iso_code2]'] = opts[:'country_iso_code2'] if !opts[:'country_iso_code2'].nil?
      query_params[:'country[iso_code3]'] = opts[:'country_iso_code3'] if !opts[:'country_iso_code3'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetCountry200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_country",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_country\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :country_id All &#39;country[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :country_iso_code2 All &#39;country[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :country_iso_code3 All &#39;country[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [GetCountryCountryStates200Response]
    def get_country_country_states(opts = {})
      data, _status_code, _headers = get_country_country_states_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :country_id All &#39;country[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :country_iso_code2 All &#39;country[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :country_iso_code3 All &#39;country[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [Array<(GetCountryCountryStates200Response, Integer, Hash)>] GetCountryCountryStates200Response data, response status code and response headers
    def get_country_country_states_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_country_country_states ...'
      end
      # resource path
      local_var_path = '/countries/:country/country_states'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'country[id]'] = opts[:'country_id'] if !opts[:'country_id'].nil?
      query_params[:'country[iso_code2]'] = opts[:'country_iso_code2'] if !opts[:'country_iso_code2'].nil?
      query_params[:'country[iso_code3]'] = opts[:'country_iso_code3'] if !opts[:'country_iso_code3'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetCountryCountryStates200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_country_country_states",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_country_country_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :country_state_id All &#39;country_state[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetCountryState200Response]
    def get_country_state(opts = {})
      data, _status_code, _headers = get_country_state_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :country_state_id All &#39;country_state[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetCountryState200Response, Integer, Hash)>] GetCountryState200Response data, response status code and response headers
    def get_country_state_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_country_state ...'
      end
      # resource path
      local_var_path = '/country_states/:country_state'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'country_state[id]'] = opts[:'country_state_id'] if !opts[:'country_state_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetCountryState200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_country_state",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_country_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [GetCurrencies200Response]
    def get_currencies(opts = {})
      data, _status_code, _headers = get_currencies_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [Array<(GetCurrencies200Response, Integer, Hash)>] GetCurrencies200Response data, response status code and response headers
    def get_currencies_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_currencies ...'
      end
      # resource path
      local_var_path = '/currencies'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetCurrencies200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_currencies",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_currencies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_id All &#39;currency[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :currency_iso_code All &#39;currency[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetCurrency200Response]
    def get_currency(opts = {})
      data, _status_code, _headers = get_currency_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_id All &#39;currency[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :currency_iso_code All &#39;currency[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetCurrency200Response, Integer, Hash)>] GetCurrency200Response data, response status code and response headers
    def get_currency_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_currency ...'
      end
      # resource path
      local_var_path = '/currencies/:currency'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'currency[id]'] = opts[:'currency_id'] if !opts[:'currency_id'].nil?
      query_params[:'currency[iso_code]'] = opts[:'currency_iso_code'] if !opts[:'currency_iso_code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetCurrency200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_currency",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_currency\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :data_center_id All &#39;data_center[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :data_center_permalink All &#39;data_center[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetDataCenter200Response]
    def get_data_center(opts = {})
      data, _status_code, _headers = get_data_center_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :data_center_id All &#39;data_center[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :data_center_permalink All &#39;data_center[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetDataCenter200Response, Integer, Hash)>] GetDataCenter200Response data, response status code and response headers
    def get_data_center_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_data_center ...'
      end
      # resource path
      local_var_path = '/data_centers/:data_center'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'data_center[id]'] = opts[:'data_center_id'] if !opts[:'data_center_id'].nil?
      query_params[:'data_center[permalink]'] = opts[:'data_center_permalink'] if !opts[:'data_center_permalink'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDataCenter200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_data_center",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_data_center\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :data_center_id All &#39;data_center[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :data_center_permalink All &#39;data_center[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetDataCenterDefaultNetwork200Response]
    def get_data_center_default_network(opts = {})
      data, _status_code, _headers = get_data_center_default_network_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :data_center_id All &#39;data_center[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :data_center_permalink All &#39;data_center[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetDataCenterDefaultNetwork200Response, Integer, Hash)>] GetDataCenterDefaultNetwork200Response data, response status code and response headers
    def get_data_center_default_network_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_data_center_default_network ...'
      end
      # resource path
      local_var_path = '/data_centers/:data_center/default_network'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'data_center[id]'] = opts[:'data_center_id'] if !opts[:'data_center_id'].nil?
      query_params[:'data_center[permalink]'] = opts[:'data_center_permalink'] if !opts[:'data_center_permalink'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDataCenterDefaultNetwork200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_data_center_default_network",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_data_center_default_network\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :data_center_id All &#39;data_center[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :data_center_permalink All &#39;data_center[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [GetDataCenterGpuTypes200Response]
    def get_data_center_gpu_types(opts = {})
      data, _status_code, _headers = get_data_center_gpu_types_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :data_center_id All &#39;data_center[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :data_center_permalink All &#39;data_center[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [Array<(GetDataCenterGpuTypes200Response, Integer, Hash)>] GetDataCenterGpuTypes200Response data, response status code and response headers
    def get_data_center_gpu_types_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_data_center_gpu_types ...'
      end
      # resource path
      local_var_path = '/data_centers/:data_center/gpu_types'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'data_center[id]'] = opts[:'data_center_id'] if !opts[:'data_center_id'].nil?
      query_params[:'data_center[permalink]'] = opts[:'data_center_permalink'] if !opts[:'data_center_permalink'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDataCenterGpuTypes200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_data_center_gpu_types",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_data_center_gpu_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @return [GetDataCenters200Response]
    def get_data_centers(opts = {})
      data, _status_code, _headers = get_data_centers_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(GetDataCenters200Response, Integer, Hash)>] GetDataCenters200Response data, response status code and response headers
    def get_data_centers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_data_centers ...'
      end
      # resource path
      local_var_path = '/data_centers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDataCenters200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_data_centers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_data_centers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :disk_id All &#39;disk[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetDisk200Response]
    def get_disk(opts = {})
      data, _status_code, _headers = get_disk_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :disk_id All &#39;disk[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetDisk200Response, Integer, Hash)>] GetDisk200Response data, response status code and response headers
    def get_disk_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_disk ...'
      end
      # resource path
      local_var_path = '/disks/:disk'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'disk[id]'] = opts[:'disk_id'] if !opts[:'disk_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDisk200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_disk",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_disk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :disk_backup_policy_id All &#39;disk_backup_policy[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetDiskBackupPolicy200Response]
    def get_disk_backup_policy(opts = {})
      data, _status_code, _headers = get_disk_backup_policy_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :disk_backup_policy_id All &#39;disk_backup_policy[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetDiskBackupPolicy200Response, Integer, Hash)>] GetDiskBackupPolicy200Response data, response status code and response headers
    def get_disk_backup_policy_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_disk_backup_policy ...'
      end
      # resource path
      local_var_path = '/disk_backup_policies/:disk_backup_policy'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'disk_backup_policy[id]'] = opts[:'disk_backup_policy_id'] if !opts[:'disk_backup_policy_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDiskBackupPolicy200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_disk_backup_policy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_disk_backup_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :disk_id All &#39;disk[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [GetDiskDiskBackupPolicies200Response]
    def get_disk_disk_backup_policies(opts = {})
      data, _status_code, _headers = get_disk_disk_backup_policies_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :disk_id All &#39;disk[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [Array<(GetDiskDiskBackupPolicies200Response, Integer, Hash)>] GetDiskDiskBackupPolicies200Response data, response status code and response headers
    def get_disk_disk_backup_policies_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_disk_disk_backup_policies ...'
      end
      # resource path
      local_var_path = '/disks/:disk/disk_backup_policies'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'disk[id]'] = opts[:'disk_id'] if !opts[:'disk_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDiskDiskBackupPolicies200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_disk_disk_backup_policies",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_disk_disk_backup_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :disk_template_id All &#39;disk_template[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :disk_template_permalink All &#39;disk_template[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetDiskTemplate200Response]
    def get_disk_template(opts = {})
      data, _status_code, _headers = get_disk_template_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :disk_template_id All &#39;disk_template[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :disk_template_permalink All &#39;disk_template[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetDiskTemplate200Response, Integer, Hash)>] GetDiskTemplate200Response data, response status code and response headers
    def get_disk_template_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_disk_template ...'
      end
      # resource path
      local_var_path = '/disk_templates/:disk_template'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'disk_template[id]'] = opts[:'disk_template_id'] if !opts[:'disk_template_id'].nil?
      query_params[:'disk_template[permalink]'] = opts[:'disk_template_permalink'] if !opts[:'disk_template_permalink'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDiskTemplate200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_disk_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_disk_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :disk_template_version_id All &#39;disk_template_version[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetDiskTemplateVersion200Response]
    def get_disk_template_version(opts = {})
      data, _status_code, _headers = get_disk_template_version_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :disk_template_version_id All &#39;disk_template_version[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetDiskTemplateVersion200Response, Integer, Hash)>] GetDiskTemplateVersion200Response data, response status code and response headers
    def get_disk_template_version_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_disk_template_version ...'
      end
      # resource path
      local_var_path = '/disk_template_versions/:disk_template_version'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'disk_template_version[id]'] = opts[:'disk_template_version_id'] if !opts[:'disk_template_version_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDiskTemplateVersion200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_disk_template_version",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_disk_template_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :disk_template_version_id All &#39;disk_template_version[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetDiskTemplateVersionSpec200Response]
    def get_disk_template_version_spec(opts = {})
      data, _status_code, _headers = get_disk_template_version_spec_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :disk_template_version_id All &#39;disk_template_version[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetDiskTemplateVersionSpec200Response, Integer, Hash)>] GetDiskTemplateVersionSpec200Response data, response status code and response headers
    def get_disk_template_version_spec_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_disk_template_version_spec ...'
      end
      # resource path
      local_var_path = '/disk_template_versions/:disk_template_version/spec'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'disk_template_version[id]'] = opts[:'disk_template_version_id'] if !opts[:'disk_template_version_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDiskTemplateVersionSpec200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_disk_template_version_spec",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_disk_template_version_spec\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :disk_template_id All &#39;disk_template[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :disk_template_permalink All &#39;disk_template[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [GetDiskTemplateVersions200Response]
    def get_disk_template_versions(opts = {})
      data, _status_code, _headers = get_disk_template_versions_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :disk_template_id All &#39;disk_template[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :disk_template_permalink All &#39;disk_template[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [Array<(GetDiskTemplateVersions200Response, Integer, Hash)>] GetDiskTemplateVersions200Response data, response status code and response headers
    def get_disk_template_versions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_disk_template_versions ...'
      end
      # resource path
      local_var_path = '/disk_templates/:disk_template/versions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'disk_template[id]'] = opts[:'disk_template_id'] if !opts[:'disk_template_id'].nil?
      query_params[:'disk_template[permalink]'] = opts[:'disk_template_permalink'] if !opts[:'disk_template_permalink'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDiskTemplateVersions200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_disk_template_versions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_disk_template_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :dns_record_id All &#39;dns_record[]&#39; params are mutually exclusive, only one can be provided.
    # @return [PostDnsZoneRecords200Response]
    def get_dns_record(opts = {})
      data, _status_code, _headers = get_dns_record_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :dns_record_id All &#39;dns_record[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(PostDnsZoneRecords200Response, Integer, Hash)>] PostDnsZoneRecords200Response data, response status code and response headers
    def get_dns_record_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_dns_record ...'
      end
      # resource path
      local_var_path = '/dns_records/:dns_record'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'dns_record[id]'] = opts[:'dns_record_id'] if !opts[:'dns_record_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PostDnsZoneRecords200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_dns_record",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_dns_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :dns_record_id All &#39;dns_record[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetDnsRecordsDnsRecord200Response]
    def get_dns_records_dns_record(opts = {})
      data, _status_code, _headers = get_dns_records_dns_record_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :dns_record_id All &#39;dns_record[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetDnsRecordsDnsRecord200Response, Integer, Hash)>] GetDnsRecordsDnsRecord200Response data, response status code and response headers
    def get_dns_records_dns_record_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_dns_records_dns_record ...'
      end
      # resource path
      local_var_path = '/dns/records/:dns_record'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'dns_record[id]'] = opts[:'dns_record_id'] if !opts[:'dns_record_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDnsRecordsDnsRecord200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_dns_records_dns_record",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_dns_records_dns_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :dns_zone_id All &#39;dns_zone[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :dns_zone_name All &#39;dns_zone[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetDnsZonesDnsZone200Response]
    def get_dns_zone(opts = {})
      data, _status_code, _headers = get_dns_zone_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :dns_zone_id All &#39;dns_zone[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :dns_zone_name All &#39;dns_zone[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetDnsZonesDnsZone200Response, Integer, Hash)>] GetDnsZonesDnsZone200Response data, response status code and response headers
    def get_dns_zone_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_dns_zone ...'
      end
      # resource path
      local_var_path = '/dns_zones/:dns_zone'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'dns_zone[id]'] = opts[:'dns_zone_id'] if !opts[:'dns_zone_id'].nil?
      query_params[:'dns_zone[name]'] = opts[:'dns_zone_name'] if !opts[:'dns_zone_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDnsZonesDnsZone200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_dns_zone",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_dns_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :dns_zone_id All &#39;dns_zone[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :dns_zone_name All &#39;dns_zone[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetDnsZoneRecords200Response]
    def get_dns_zone_records(opts = {})
      data, _status_code, _headers = get_dns_zone_records_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :dns_zone_id All &#39;dns_zone[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :dns_zone_name All &#39;dns_zone[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetDnsZoneRecords200Response, Integer, Hash)>] GetDnsZoneRecords200Response data, response status code and response headers
    def get_dns_zone_records_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_dns_zone_records ...'
      end
      # resource path
      local_var_path = '/dns_zones/:dns_zone/records'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'dns_zone[id]'] = opts[:'dns_zone_id'] if !opts[:'dns_zone_id'].nil?
      query_params[:'dns_zone[name]'] = opts[:'dns_zone_name'] if !opts[:'dns_zone_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDnsZoneRecords200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_dns_zone_records",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_dns_zone_records\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :dns_zone_id All &#39;dns_zone[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :dns_zone_name All &#39;dns_zone[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetDnsZonesDnsZone200Response]
    def get_dns_zones_dns_zone(opts = {})
      data, _status_code, _headers = get_dns_zones_dns_zone_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :dns_zone_id All &#39;dns_zone[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :dns_zone_name All &#39;dns_zone[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetDnsZonesDnsZone200Response, Integer, Hash)>] GetDnsZonesDnsZone200Response data, response status code and response headers
    def get_dns_zones_dns_zone_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_dns_zones_dns_zone ...'
      end
      # resource path
      local_var_path = '/dns/zones/:dns_zone'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'dns_zone[id]'] = opts[:'dns_zone_id'] if !opts[:'dns_zone_id'].nil?
      query_params[:'dns_zone[name]'] = opts[:'dns_zone_name'] if !opts[:'dns_zone_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDnsZonesDnsZone200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_dns_zones_dns_zone",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_dns_zones_dns_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :dns_zone_id All &#39;dns_zone[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :dns_zone_name All &#39;dns_zone[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetDnsZonesDnsZoneRecords200Response]
    def get_dns_zones_dns_zone_records(opts = {})
      data, _status_code, _headers = get_dns_zones_dns_zone_records_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :dns_zone_id All &#39;dns_zone[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :dns_zone_name All &#39;dns_zone[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetDnsZonesDnsZoneRecords200Response, Integer, Hash)>] GetDnsZonesDnsZoneRecords200Response data, response status code and response headers
    def get_dns_zones_dns_zone_records_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_dns_zones_dns_zone_records ...'
      end
      # resource path
      local_var_path = '/dns/zones/:dns_zone/records'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'dns_zone[id]'] = opts[:'dns_zone_id'] if !opts[:'dns_zone_id'].nil?
      query_params[:'dns_zone[name]'] = opts[:'dns_zone_name'] if !opts[:'dns_zone_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDnsZonesDnsZoneRecords200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_dns_zones_dns_zone_records",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_dns_zones_dns_zone_records\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :dns_zone_id All &#39;dns_zone[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :dns_zone_name All &#39;dns_zone[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetDnsZonesDnsZoneVerificationDetails200Response]
    def get_dns_zones_dns_zone_verification_details(opts = {})
      data, _status_code, _headers = get_dns_zones_dns_zone_verification_details_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :dns_zone_id All &#39;dns_zone[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :dns_zone_name All &#39;dns_zone[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetDnsZonesDnsZoneVerificationDetails200Response, Integer, Hash)>] GetDnsZonesDnsZoneVerificationDetails200Response data, response status code and response headers
    def get_dns_zones_dns_zone_verification_details_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_dns_zones_dns_zone_verification_details ...'
      end
      # resource path
      local_var_path = '/dns/zones/:dns_zone/verification_details'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'dns_zone[id]'] = opts[:'dns_zone_id'] if !opts[:'dns_zone_id'].nil?
      query_params[:'dns_zone[name]'] = opts[:'dns_zone_name'] if !opts[:'dns_zone_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDnsZonesDnsZoneVerificationDetails200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_dns_zones_dns_zone_verification_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_dns_zones_dns_zone_verification_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :file_storage_volume_id All &#39;file_storage_volume[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetFileStorageVolume200Response]
    def get_file_storage_volume(opts = {})
      data, _status_code, _headers = get_file_storage_volume_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :file_storage_volume_id All &#39;file_storage_volume[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetFileStorageVolume200Response, Integer, Hash)>] GetFileStorageVolume200Response data, response status code and response headers
    def get_file_storage_volume_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_file_storage_volume ...'
      end
      # resource path
      local_var_path = '/file_storage_volumes/:file_storage_volume'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'file_storage_volume[id]'] = opts[:'file_storage_volume_id'] if !opts[:'file_storage_volume_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetFileStorageVolume200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_file_storage_volume",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_file_storage_volume\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :gpu_type_id All &#39;gpu_type[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :gpu_type_permalink All &#39;gpu_type[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetGpuType200Response]
    def get_gpu_type(opts = {})
      data, _status_code, _headers = get_gpu_type_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :gpu_type_id All &#39;gpu_type[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :gpu_type_permalink All &#39;gpu_type[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetGpuType200Response, Integer, Hash)>] GetGpuType200Response data, response status code and response headers
    def get_gpu_type_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_gpu_type ...'
      end
      # resource path
      local_var_path = '/gpu_types/:gpu_type'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'gpu_type[id]'] = opts[:'gpu_type_id'] if !opts[:'gpu_type_id'].nil?
      query_params[:'gpu_type[permalink]'] = opts[:'gpu_type_permalink'] if !opts[:'gpu_type_permalink'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetGpuType200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_gpu_type",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_gpu_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [GetGpuTypes200Response]
    def get_gpu_types(opts = {})
      data, _status_code, _headers = get_gpu_types_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [Array<(GetGpuTypes200Response, Integer, Hash)>] GetGpuTypes200Response data, response status code and response headers
    def get_gpu_types_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_gpu_types ...'
      end
      # resource path
      local_var_path = '/gpu_types'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetGpuTypes200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_gpu_types",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_gpu_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :ip_address_id All &#39;ip_address[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :ip_address_address All &#39;ip_address[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetIpAddress200Response]
    def get_ip_address(opts = {})
      data, _status_code, _headers = get_ip_address_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :ip_address_id All &#39;ip_address[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :ip_address_address All &#39;ip_address[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetIpAddress200Response, Integer, Hash)>] GetIpAddress200Response data, response status code and response headers
    def get_ip_address_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_ip_address ...'
      end
      # resource path
      local_var_path = '/ip_addresses/:ip_address'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ip_address[id]'] = opts[:'ip_address_id'] if !opts[:'ip_address_id'].nil?
      query_params[:'ip_address[address]'] = opts[:'ip_address_address'] if !opts[:'ip_address_address'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetIpAddress200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_ip_address",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_ip_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :load_balancer_id All &#39;load_balancer[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :load_balancer_api_reference All &#39;load_balancer[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetLoadBalancer200Response]
    def get_load_balancer(opts = {})
      data, _status_code, _headers = get_load_balancer_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :load_balancer_id All &#39;load_balancer[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :load_balancer_api_reference All &#39;load_balancer[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetLoadBalancer200Response, Integer, Hash)>] GetLoadBalancer200Response data, response status code and response headers
    def get_load_balancer_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_load_balancer ...'
      end
      # resource path
      local_var_path = '/load_balancers/:load_balancer'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'load_balancer[id]'] = opts[:'load_balancer_id'] if !opts[:'load_balancer_id'].nil?
      query_params[:'load_balancer[api_reference]'] = opts[:'load_balancer_api_reference'] if !opts[:'load_balancer_api_reference'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetLoadBalancer200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_load_balancer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_load_balancer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :load_balancer_id All &#39;load_balancer[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :load_balancer_api_reference All &#39;load_balancer[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [GetLoadBalancerRules200Response]
    def get_load_balancer_rules(opts = {})
      data, _status_code, _headers = get_load_balancer_rules_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :load_balancer_id All &#39;load_balancer[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :load_balancer_api_reference All &#39;load_balancer[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [Array<(GetLoadBalancerRules200Response, Integer, Hash)>] GetLoadBalancerRules200Response data, response status code and response headers
    def get_load_balancer_rules_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_load_balancer_rules ...'
      end
      # resource path
      local_var_path = '/load_balancers/:load_balancer/rules'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'load_balancer[id]'] = opts[:'load_balancer_id'] if !opts[:'load_balancer_id'].nil?
      query_params[:'load_balancer[api_reference]'] = opts[:'load_balancer_api_reference'] if !opts[:'load_balancer_api_reference'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetLoadBalancerRules200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_load_balancer_rules",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_load_balancer_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :load_balancer_rule_id All &#39;load_balancer_rule[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetLoadBalancersRulesLoadBalancerRule200Response]
    def get_load_balancers_rules_load_balancer_rule(opts = {})
      data, _status_code, _headers = get_load_balancers_rules_load_balancer_rule_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :load_balancer_rule_id All &#39;load_balancer_rule[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetLoadBalancersRulesLoadBalancerRule200Response, Integer, Hash)>] GetLoadBalancersRulesLoadBalancerRule200Response data, response status code and response headers
    def get_load_balancers_rules_load_balancer_rule_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_load_balancers_rules_load_balancer_rule ...'
      end
      # resource path
      local_var_path = '/load_balancers/rules/:load_balancer_rule'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'load_balancer_rule[id]'] = opts[:'load_balancer_rule_id'] if !opts[:'load_balancer_rule_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetLoadBalancersRulesLoadBalancerRule200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_load_balancers_rules_load_balancer_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_load_balancers_rules_load_balancer_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :network_id All &#39;network[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :network_permalink All &#39;network[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetNetwork200Response]
    def get_network(opts = {})
      data, _status_code, _headers = get_network_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :network_id All &#39;network[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :network_permalink All &#39;network[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetNetwork200Response, Integer, Hash)>] GetNetwork200Response data, response status code and response headers
    def get_network_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_network ...'
      end
      # resource path
      local_var_path = '/networks/:network'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'network[id]'] = opts[:'network_id'] if !opts[:'network_id'].nil?
      query_params[:'network[permalink]'] = opts[:'network_permalink'] if !opts[:'network_permalink'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetNetwork200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_network",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_network\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :operating_system_id All &#39;operating_system[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetOperatingSystem200Response]
    def get_operating_system(opts = {})
      data, _status_code, _headers = get_operating_system_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :operating_system_id All &#39;operating_system[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetOperatingSystem200Response, Integer, Hash)>] GetOperatingSystem200Response data, response status code and response headers
    def get_operating_system_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_operating_system ...'
      end
      # resource path
      local_var_path = '/operating_systems/:operating_system'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'operating_system[id]'] = opts[:'operating_system_id'] if !opts[:'operating_system_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOperatingSystem200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_operating_system",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_operating_system\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [GetOperatingSystems200Response]
    def get_operating_systems(opts = {})
      data, _status_code, _headers = get_operating_systems_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [Array<(GetOperatingSystems200Response, Integer, Hash)>] GetOperatingSystems200Response data, response status code and response headers
    def get_operating_systems_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_operating_systems ...'
      end
      # resource path
      local_var_path = '/operating_systems'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOperatingSystems200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_operating_systems",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_operating_systems\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetOrganization200Response]
    def get_organization(opts = {})
      data, _status_code, _headers = get_organization_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetOrganization200Response, Integer, Hash)>] GetOrganization200Response data, response status code and response headers
    def get_organization_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_organization ...'
      end
      # resource path
      local_var_path = '/organizations/:organization'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'organization[id]'] = opts[:'organization_id'] if !opts[:'organization_id'].nil?
      query_params[:'organization[sub_domain]'] = opts[:'organization_sub_domain'] if !opts[:'organization_sub_domain'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrganization200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetOrganizationAvailableNetworks200Response]
    def get_organization_available_networks(opts = {})
      data, _status_code, _headers = get_organization_available_networks_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetOrganizationAvailableNetworks200Response, Integer, Hash)>] GetOrganizationAvailableNetworks200Response data, response status code and response headers
    def get_organization_available_networks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_organization_available_networks ...'
      end
      # resource path
      local_var_path = '/organizations/:organization/available_networks'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'organization[id]'] = opts[:'organization_id'] if !opts[:'organization_id'].nil?
      query_params[:'organization[sub_domain]'] = opts[:'organization_sub_domain'] if !opts[:'organization_sub_domain'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrganizationAvailableNetworks200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_organization_available_networks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_organization_available_networks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [GetOrganizationCertificates200Response]
    def get_organization_certificates(opts = {})
      data, _status_code, _headers = get_organization_certificates_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [Array<(GetOrganizationCertificates200Response, Integer, Hash)>] GetOrganizationCertificates200Response data, response status code and response headers
    def get_organization_certificates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_organization_certificates ...'
      end
      # resource path
      local_var_path = '/organizations/:organization/certificates'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'organization[id]'] = opts[:'organization_id'] if !opts[:'organization_id'].nil?
      query_params[:'organization[sub_domain]'] = opts[:'organization_sub_domain'] if !opts[:'organization_sub_domain'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrganizationCertificates200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_organization_certificates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_organization_certificates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [GetOrganizationDiskBackupPolicies200Response]
    def get_organization_disk_backup_policies(opts = {})
      data, _status_code, _headers = get_organization_disk_backup_policies_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [Array<(GetOrganizationDiskBackupPolicies200Response, Integer, Hash)>] GetOrganizationDiskBackupPolicies200Response data, response status code and response headers
    def get_organization_disk_backup_policies_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_organization_disk_backup_policies ...'
      end
      # resource path
      local_var_path = '/organizations/:organization/disk_backup_policies'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'organization[id]'] = opts[:'organization_id'] if !opts[:'organization_id'].nil?
      query_params[:'organization[sub_domain]'] = opts[:'organization_sub_domain'] if !opts[:'organization_sub_domain'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrganizationDiskBackupPolicies200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_organization_disk_backup_policies",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_organization_disk_backup_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Boolean] :include_universal 
    # @option opts [String] :operating_system_id All &#39;operating_system[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [GetOrganizationDiskTemplates200Response]
    def get_organization_disk_templates(opts = {})
      data, _status_code, _headers = get_organization_disk_templates_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Boolean] :include_universal 
    # @option opts [String] :operating_system_id All &#39;operating_system[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [Array<(GetOrganizationDiskTemplates200Response, Integer, Hash)>] GetOrganizationDiskTemplates200Response data, response status code and response headers
    def get_organization_disk_templates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_organization_disk_templates ...'
      end
      # resource path
      local_var_path = '/organizations/:organization/disk_templates'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'organization[id]'] = opts[:'organization_id'] if !opts[:'organization_id'].nil?
      query_params[:'organization[sub_domain]'] = opts[:'organization_sub_domain'] if !opts[:'organization_sub_domain'].nil?
      query_params[:'include_universal'] = opts[:'include_universal'] if !opts[:'include_universal'].nil?
      query_params[:'operating_system[id]'] = opts[:'operating_system_id'] if !opts[:'operating_system_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrganizationDiskTemplates200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_organization_disk_templates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_organization_disk_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [GetOrganizationDisks200Response]
    def get_organization_disks(opts = {})
      data, _status_code, _headers = get_organization_disks_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [Array<(GetOrganizationDisks200Response, Integer, Hash)>] GetOrganizationDisks200Response data, response status code and response headers
    def get_organization_disks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_organization_disks ...'
      end
      # resource path
      local_var_path = '/organizations/:organization/disks'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'organization[id]'] = opts[:'organization_id'] if !opts[:'organization_id'].nil?
      query_params[:'organization[sub_domain]'] = opts[:'organization_sub_domain'] if !opts[:'organization_sub_domain'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrganizationDisks200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_organization_disks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_organization_disks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [GetOrganizationDnsZones200Response]
    def get_organization_dns_zones(opts = {})
      data, _status_code, _headers = get_organization_dns_zones_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [Array<(GetOrganizationDnsZones200Response, Integer, Hash)>] GetOrganizationDnsZones200Response data, response status code and response headers
    def get_organization_dns_zones_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_organization_dns_zones ...'
      end
      # resource path
      local_var_path = '/organizations/:organization/dns/zones'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'organization[id]'] = opts[:'organization_id'] if !opts[:'organization_id'].nil?
      query_params[:'organization[sub_domain]'] = opts[:'organization_sub_domain'] if !opts[:'organization_sub_domain'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrganizationDnsZones200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_organization_dns_zones",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_organization_dns_zones\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetOrganizationDnsZonesNameservers200Response]
    def get_organization_dns_zones_nameservers(opts = {})
      data, _status_code, _headers = get_organization_dns_zones_nameservers_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetOrganizationDnsZonesNameservers200Response, Integer, Hash)>] GetOrganizationDnsZonesNameservers200Response data, response status code and response headers
    def get_organization_dns_zones_nameservers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_organization_dns_zones_nameservers ...'
      end
      # resource path
      local_var_path = '/organizations/:organization/dns_zones/nameservers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'organization[id]'] = opts[:'organization_id'] if !opts[:'organization_id'].nil?
      query_params[:'organization[sub_domain]'] = opts[:'organization_sub_domain'] if !opts[:'organization_sub_domain'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrganizationDnsZonesNameservers200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_organization_dns_zones_nameservers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_organization_dns_zones_nameservers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [GetOrganizationFileStorageVolumes200Response]
    def get_organization_file_storage_volumes(opts = {})
      data, _status_code, _headers = get_organization_file_storage_volumes_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [Array<(GetOrganizationFileStorageVolumes200Response, Integer, Hash)>] GetOrganizationFileStorageVolumes200Response data, response status code and response headers
    def get_organization_file_storage_volumes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_organization_file_storage_volumes ...'
      end
      # resource path
      local_var_path = '/organizations/:organization/file_storage_volumes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'organization[id]'] = opts[:'organization_id'] if !opts[:'organization_id'].nil?
      query_params[:'organization[sub_domain]'] = opts[:'organization_sub_domain'] if !opts[:'organization_sub_domain'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrganizationFileStorageVolumes200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_organization_file_storage_volumes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_organization_file_storage_volumes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Boolean] :allocated 
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [GetOrganizationIpAddresses200Response]
    def get_organization_ip_addresses(opts = {})
      data, _status_code, _headers = get_organization_ip_addresses_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Boolean] :allocated 
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [Array<(GetOrganizationIpAddresses200Response, Integer, Hash)>] GetOrganizationIpAddresses200Response data, response status code and response headers
    def get_organization_ip_addresses_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_organization_ip_addresses ...'
      end
      # resource path
      local_var_path = '/organizations/:organization/ip_addresses'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'organization[id]'] = opts[:'organization_id'] if !opts[:'organization_id'].nil?
      query_params[:'organization[sub_domain]'] = opts[:'organization_sub_domain'] if !opts[:'organization_sub_domain'].nil?
      query_params[:'allocated'] = opts[:'allocated'] if !opts[:'allocated'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrganizationIpAddresses200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_organization_ip_addresses",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_organization_ip_addresses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [GetOrganizationLoadBalancers200Response]
    def get_organization_load_balancers(opts = {})
      data, _status_code, _headers = get_organization_load_balancers_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [Array<(GetOrganizationLoadBalancers200Response, Integer, Hash)>] GetOrganizationLoadBalancers200Response data, response status code and response headers
    def get_organization_load_balancers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_organization_load_balancers ...'
      end
      # resource path
      local_var_path = '/organizations/:organization/load_balancers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'organization[id]'] = opts[:'organization_id'] if !opts[:'organization_id'].nil?
      query_params[:'organization[sub_domain]'] = opts[:'organization_sub_domain'] if !opts[:'organization_sub_domain'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrganizationLoadBalancers200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_organization_load_balancers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_organization_load_balancers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [GetOrganizationManaged200Response]
    def get_organization_managed(opts = {})
      data, _status_code, _headers = get_organization_managed_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [Array<(GetOrganizationManaged200Response, Integer, Hash)>] GetOrganizationManaged200Response data, response status code and response headers
    def get_organization_managed_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_organization_managed ...'
      end
      # resource path
      local_var_path = '/organizations/:organization/managed'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'organization[id]'] = opts[:'organization_id'] if !opts[:'organization_id'].nil?
      query_params[:'organization[sub_domain]'] = opts[:'organization_sub_domain'] if !opts[:'organization_sub_domain'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrganizationManaged200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_organization_managed",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_organization_managed\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [GetOrganizationNetworkSpeedProfiles200Response]
    def get_organization_network_speed_profiles(opts = {})
      data, _status_code, _headers = get_organization_network_speed_profiles_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [Array<(GetOrganizationNetworkSpeedProfiles200Response, Integer, Hash)>] GetOrganizationNetworkSpeedProfiles200Response data, response status code and response headers
    def get_organization_network_speed_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_organization_network_speed_profiles ...'
      end
      # resource path
      local_var_path = '/organizations/:organization/network_speed_profiles'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'organization[id]'] = opts[:'organization_id'] if !opts[:'organization_id'].nil?
      query_params[:'organization[sub_domain]'] = opts[:'organization_sub_domain'] if !opts[:'organization_sub_domain'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrganizationNetworkSpeedProfiles200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_organization_network_speed_profiles",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_organization_network_speed_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [GetOrganizationSecurityGroups200Response]
    def get_organization_security_groups(opts = {})
      data, _status_code, _headers = get_organization_security_groups_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [Array<(GetOrganizationSecurityGroups200Response, Integer, Hash)>] GetOrganizationSecurityGroups200Response data, response status code and response headers
    def get_organization_security_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_organization_security_groups ...'
      end
      # resource path
      local_var_path = '/organizations/:organization/security_groups'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'organization[id]'] = opts[:'organization_id'] if !opts[:'organization_id'].nil?
      query_params[:'organization[sub_domain]'] = opts[:'organization_sub_domain'] if !opts[:'organization_sub_domain'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrganizationSecurityGroups200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_organization_security_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_organization_security_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [GetOrganizationSshKeys200Response]
    def get_organization_ssh_keys(opts = {})
      data, _status_code, _headers = get_organization_ssh_keys_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [Array<(GetOrganizationSshKeys200Response, Integer, Hash)>] GetOrganizationSshKeys200Response data, response status code and response headers
    def get_organization_ssh_keys_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_organization_ssh_keys ...'
      end
      # resource path
      local_var_path = '/organizations/:organization/ssh_keys'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'organization[id]'] = opts[:'organization_id'] if !opts[:'organization_id'].nil?
      query_params[:'organization[sub_domain]'] = opts[:'organization_sub_domain'] if !opts[:'organization_sub_domain'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrganizationSshKeys200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_organization_ssh_keys",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_organization_ssh_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [GetOrganizationTags200Response]
    def get_organization_tags(opts = {})
      data, _status_code, _headers = get_organization_tags_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [Array<(GetOrganizationTags200Response, Integer, Hash)>] GetOrganizationTags200Response data, response status code and response headers
    def get_organization_tags_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_organization_tags ...'
      end
      # resource path
      local_var_path = '/organizations/:organization/tags'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'organization[id]'] = opts[:'organization_id'] if !opts[:'organization_id'].nil?
      query_params[:'organization[sub_domain]'] = opts[:'organization_sub_domain'] if !opts[:'organization_sub_domain'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrganizationTags200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_organization_tags",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_organization_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [GetOrganizationTrashObjects200Response]
    def get_organization_trash_objects(opts = {})
      data, _status_code, _headers = get_organization_trash_objects_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [Array<(GetOrganizationTrashObjects200Response, Integer, Hash)>] GetOrganizationTrashObjects200Response data, response status code and response headers
    def get_organization_trash_objects_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_organization_trash_objects ...'
      end
      # resource path
      local_var_path = '/organizations/:organization/trash_objects'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'organization[id]'] = opts[:'organization_id'] if !opts[:'organization_id'].nil?
      query_params[:'organization[sub_domain]'] = opts[:'organization_sub_domain'] if !opts[:'organization_sub_domain'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrganizationTrashObjects200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_organization_trash_objects",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_organization_trash_objects\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [GetOrganizationUsersWithAccess200Response]
    def get_organization_users_with_access(opts = {})
      data, _status_code, _headers = get_organization_users_with_access_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [Array<(GetOrganizationUsersWithAccess200Response, Integer, Hash)>] GetOrganizationUsersWithAccess200Response data, response status code and response headers
    def get_organization_users_with_access_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_organization_users_with_access ...'
      end
      # resource path
      local_var_path = '/organizations/:organization/users_with_access'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'organization[id]'] = opts[:'organization_id'] if !opts[:'organization_id'].nil?
      query_params[:'organization[sub_domain]'] = opts[:'organization_sub_domain'] if !opts[:'organization_sub_domain'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrganizationUsersWithAccess200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_organization_users_with_access",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_organization_users_with_access\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetOrganizationVirtualMachineGroups200Response]
    def get_organization_virtual_machine_groups(opts = {})
      data, _status_code, _headers = get_organization_virtual_machine_groups_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetOrganizationVirtualMachineGroups200Response, Integer, Hash)>] GetOrganizationVirtualMachineGroups200Response data, response status code and response headers
    def get_organization_virtual_machine_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_organization_virtual_machine_groups ...'
      end
      # resource path
      local_var_path = '/organizations/:organization/virtual_machine_groups'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'organization[id]'] = opts[:'organization_id'] if !opts[:'organization_id'].nil?
      query_params[:'organization[sub_domain]'] = opts[:'organization_sub_domain'] if !opts[:'organization_sub_domain'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrganizationVirtualMachineGroups200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_organization_virtual_machine_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_organization_virtual_machine_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [GetOrganizationVirtualMachines200Response]
    def get_organization_virtual_machines(opts = {})
      data, _status_code, _headers = get_organization_virtual_machines_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [Array<(GetOrganizationVirtualMachines200Response, Integer, Hash)>] GetOrganizationVirtualMachines200Response data, response status code and response headers
    def get_organization_virtual_machines_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_organization_virtual_machines ...'
      end
      # resource path
      local_var_path = '/organizations/:organization/virtual_machines'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'organization[id]'] = opts[:'organization_id'] if !opts[:'organization_id'].nil?
      query_params[:'organization[sub_domain]'] = opts[:'organization_sub_domain'] if !opts[:'organization_sub_domain'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrganizationVirtualMachines200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_organization_virtual_machines",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_organization_virtual_machines\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @return [GetOrganizations200Response]
    def get_organizations(opts = {})
      data, _status_code, _headers = get_organizations_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(GetOrganizations200Response, Integer, Hash)>] GetOrganizations200Response data, response status code and response headers
    def get_organizations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_organizations ...'
      end
      # resource path
      local_var_path = '/organizations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrganizations200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_organizations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_organizations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [GetOrganizationDnsZones200Response]
    def get_organizations_organization_dns_zones(opts = {})
      data, _status_code, _headers = get_organizations_organization_dns_zones_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [Array<(GetOrganizationDnsZones200Response, Integer, Hash)>] GetOrganizationDnsZones200Response data, response status code and response headers
    def get_organizations_organization_dns_zones_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_organizations_organization_dns_zones ...'
      end
      # resource path
      local_var_path = '/organizations/:organization/dns_zones'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'organization[id]'] = opts[:'organization_id'] if !opts[:'organization_id'].nil?
      query_params[:'organization[sub_domain]'] = opts[:'organization_sub_domain'] if !opts[:'organization_sub_domain'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrganizationDnsZones200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_organizations_organization_dns_zones",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_organizations_organization_dns_zones\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :security_group_id All &#39;security_group[]&#39; params are mutually exclusive, only one can be provided.
    # @return [PostOrganizationSecurityGroups200Response]
    def get_security_group(opts = {})
      data, _status_code, _headers = get_security_group_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :security_group_id All &#39;security_group[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(PostOrganizationSecurityGroups200Response, Integer, Hash)>] PostOrganizationSecurityGroups200Response data, response status code and response headers
    def get_security_group_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_security_group ...'
      end
      # resource path
      local_var_path = '/security_groups/:security_group'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'security_group[id]'] = opts[:'security_group_id'] if !opts[:'security_group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PostOrganizationSecurityGroups200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_security_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_security_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :security_group_id All &#39;security_group[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [GetSecurityGroupRules200Response]
    def get_security_group_rules(opts = {})
      data, _status_code, _headers = get_security_group_rules_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :security_group_id All &#39;security_group[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [Array<(GetSecurityGroupRules200Response, Integer, Hash)>] GetSecurityGroupRules200Response data, response status code and response headers
    def get_security_group_rules_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_security_group_rules ...'
      end
      # resource path
      local_var_path = '/security_groups/:security_group/rules'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'security_group[id]'] = opts[:'security_group_id'] if !opts[:'security_group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetSecurityGroupRules200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_security_group_rules",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_security_group_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :security_group_rule_id All &#39;security_group_rule[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetSecurityGroupsRulesSecurityGroupRule200Response]
    def get_security_groups_rules_security_group_rule(opts = {})
      data, _status_code, _headers = get_security_groups_rules_security_group_rule_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :security_group_rule_id All &#39;security_group_rule[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetSecurityGroupsRulesSecurityGroupRule200Response, Integer, Hash)>] GetSecurityGroupsRulesSecurityGroupRule200Response data, response status code and response headers
    def get_security_groups_rules_security_group_rule_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_security_groups_rules_security_group_rule ...'
      end
      # resource path
      local_var_path = '/security_groups/rules/:security_group_rule'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'security_group_rule[id]'] = opts[:'security_group_rule_id'] if !opts[:'security_group_rule_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetSecurityGroupsRulesSecurityGroupRule200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_security_groups_rules_security_group_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_security_groups_rules_security_group_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :tag_id All &#39;tag[]&#39; params are mutually exclusive, only one can be provided.
    # @return [PostOrganizationTags200Response]
    def get_tag(opts = {})
      data, _status_code, _headers = get_tag_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :tag_id All &#39;tag[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(PostOrganizationTags200Response, Integer, Hash)>] PostOrganizationTags200Response data, response status code and response headers
    def get_tag_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_tag ...'
      end
      # resource path
      local_var_path = '/tags/:tag'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tag[id]'] = opts[:'tag_id'] if !opts[:'tag_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PostOrganizationTags200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_tag",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :task_id All &#39;task[]&#39; params are mutually exclusive, only one can be provided.
    # @return [PutVirtualMachinePackage200Response]
    def get_task(opts = {})
      data, _status_code, _headers = get_task_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :task_id All &#39;task[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(PutVirtualMachinePackage200Response, Integer, Hash)>] PutVirtualMachinePackage200Response data, response status code and response headers
    def get_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_task ...'
      end
      # resource path
      local_var_path = '/tasks/:task'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'task[id]'] = opts[:'task_id'] if !opts[:'task_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PutVirtualMachinePackage200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_task",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :trash_object_id All &#39;trash_object[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :trash_object_object_id All &#39;trash_object[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetTrashObject200Response]
    def get_trash_object(opts = {})
      data, _status_code, _headers = get_trash_object_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :trash_object_id All &#39;trash_object[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :trash_object_object_id All &#39;trash_object[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetTrashObject200Response, Integer, Hash)>] GetTrashObject200Response data, response status code and response headers
    def get_trash_object_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_trash_object ...'
      end
      # resource path
      local_var_path = '/trash_objects/:trash_object'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'trash_object[id]'] = opts[:'trash_object_id'] if !opts[:'trash_object_id'].nil?
      query_params[:'trash_object[object_id]'] = opts[:'trash_object_object_id'] if !opts[:'trash_object_object_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTrashObject200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_trash_object",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_trash_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @return [GetUsersCurrent200Response]
    def get_users_current(opts = {})
      data, _status_code, _headers = get_users_current_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(GetUsersCurrent200Response, Integer, Hash)>] GetUsersCurrent200Response data, response status code and response headers
    def get_users_current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_users_current ...'
      end
      # resource path
      local_var_path = '/users/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetUsersCurrent200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_users_current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_users_current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :virtual_machine_id All &#39;virtual_machine[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :virtual_machine_fqdn All &#39;virtual_machine[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetVirtualMachine200Response]
    def get_virtual_machine(opts = {})
      data, _status_code, _headers = get_virtual_machine_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :virtual_machine_id All &#39;virtual_machine[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :virtual_machine_fqdn All &#39;virtual_machine[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetVirtualMachine200Response, Integer, Hash)>] GetVirtualMachine200Response data, response status code and response headers
    def get_virtual_machine_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_virtual_machine ...'
      end
      # resource path
      local_var_path = '/virtual_machines/:virtual_machine'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'virtual_machine[id]'] = opts[:'virtual_machine_id'] if !opts[:'virtual_machine_id'].nil?
      query_params[:'virtual_machine[fqdn]'] = opts[:'virtual_machine_fqdn'] if !opts[:'virtual_machine_fqdn'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetVirtualMachine200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_virtual_machine",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_virtual_machine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :virtual_machine_id All &#39;virtual_machine[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :virtual_machine_fqdn All &#39;virtual_machine[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Boolean] :include_disks 
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [GetVirtualMachineDiskBackupPolicies200Response]
    def get_virtual_machine_disk_backup_policies(opts = {})
      data, _status_code, _headers = get_virtual_machine_disk_backup_policies_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :virtual_machine_id All &#39;virtual_machine[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :virtual_machine_fqdn All &#39;virtual_machine[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Boolean] :include_disks 
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [Array<(GetVirtualMachineDiskBackupPolicies200Response, Integer, Hash)>] GetVirtualMachineDiskBackupPolicies200Response data, response status code and response headers
    def get_virtual_machine_disk_backup_policies_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_virtual_machine_disk_backup_policies ...'
      end
      # resource path
      local_var_path = '/virtual_machines/:virtual_machine/disk_backup_policies'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'virtual_machine[id]'] = opts[:'virtual_machine_id'] if !opts[:'virtual_machine_id'].nil?
      query_params[:'virtual_machine[fqdn]'] = opts[:'virtual_machine_fqdn'] if !opts[:'virtual_machine_fqdn'].nil?
      query_params[:'include_disks'] = opts[:'include_disks'] if !opts[:'include_disks'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetVirtualMachineDiskBackupPolicies200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_virtual_machine_disk_backup_policies",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_virtual_machine_disk_backup_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :virtual_machine_id All &#39;virtual_machine[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :virtual_machine_fqdn All &#39;virtual_machine[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [GetVirtualMachineDisks200Response]
    def get_virtual_machine_disks(opts = {})
      data, _status_code, _headers = get_virtual_machine_disks_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :virtual_machine_id All &#39;virtual_machine[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :virtual_machine_fqdn All &#39;virtual_machine[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [Array<(GetVirtualMachineDisks200Response, Integer, Hash)>] GetVirtualMachineDisks200Response data, response status code and response headers
    def get_virtual_machine_disks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_virtual_machine_disks ...'
      end
      # resource path
      local_var_path = '/virtual_machines/:virtual_machine/disks'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'virtual_machine[id]'] = opts[:'virtual_machine_id'] if !opts[:'virtual_machine_id'].nil?
      query_params[:'virtual_machine[fqdn]'] = opts[:'virtual_machine_fqdn'] if !opts[:'virtual_machine_fqdn'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetVirtualMachineDisks200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_virtual_machine_disks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_virtual_machine_disks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :virtual_machine_group_id All &#39;virtual_machine_group[]&#39; params are mutually exclusive, only one can be provided.
    # @return [PostOrganizationVirtualMachineGroups200Response]
    def get_virtual_machine_group(opts = {})
      data, _status_code, _headers = get_virtual_machine_group_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :virtual_machine_group_id All &#39;virtual_machine_group[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(PostOrganizationVirtualMachineGroups200Response, Integer, Hash)>] PostOrganizationVirtualMachineGroups200Response data, response status code and response headers
    def get_virtual_machine_group_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_virtual_machine_group ...'
      end
      # resource path
      local_var_path = '/virtual_machine_groups/:virtual_machine_group'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'virtual_machine_group[id]'] = opts[:'virtual_machine_group_id'] if !opts[:'virtual_machine_group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PostOrganizationVirtualMachineGroups200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_virtual_machine_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_virtual_machine_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :virtual_machine_id All &#39;virtual_machine[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :virtual_machine_fqdn All &#39;virtual_machine[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :network_id All &#39;network[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :network_permalink All &#39;network[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetVirtualMachineNetworkInterface200Response]
    def get_virtual_machine_network_interface(opts = {})
      data, _status_code, _headers = get_virtual_machine_network_interface_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :virtual_machine_id All &#39;virtual_machine[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :virtual_machine_fqdn All &#39;virtual_machine[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :network_id All &#39;network[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :network_permalink All &#39;network[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetVirtualMachineNetworkInterface200Response, Integer, Hash)>] GetVirtualMachineNetworkInterface200Response data, response status code and response headers
    def get_virtual_machine_network_interface_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_virtual_machine_network_interface ...'
      end
      # resource path
      local_var_path = '/virtual_machines/:virtual_machine/networks/:network/interface'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'virtual_machine[id]'] = opts[:'virtual_machine_id'] if !opts[:'virtual_machine_id'].nil?
      query_params[:'virtual_machine[fqdn]'] = opts[:'virtual_machine_fqdn'] if !opts[:'virtual_machine_fqdn'].nil?
      query_params[:'network[id]'] = opts[:'network_id'] if !opts[:'network_id'].nil?
      query_params[:'network[permalink]'] = opts[:'network_permalink'] if !opts[:'network_permalink'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetVirtualMachineNetworkInterface200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_virtual_machine_network_interface",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_virtual_machine_network_interface\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param address_version [IPAddressVersionEnum] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :virtual_machine_network_interface_id All &#39;virtual_machine_network_interface[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetVirtualMachineNetworkInterfaceAvailableIpsAddressVersion200Response]
    def get_virtual_machine_network_interface_available_ips_address_version(address_version, opts = {})
      data, _status_code, _headers = get_virtual_machine_network_interface_available_ips_address_version_with_http_info(address_version, opts)
      data
    end

    # @param address_version [IPAddressVersionEnum] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :virtual_machine_network_interface_id All &#39;virtual_machine_network_interface[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetVirtualMachineNetworkInterfaceAvailableIpsAddressVersion200Response, Integer, Hash)>] GetVirtualMachineNetworkInterfaceAvailableIpsAddressVersion200Response data, response status code and response headers
    def get_virtual_machine_network_interface_available_ips_address_version_with_http_info(address_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_virtual_machine_network_interface_available_ips_address_version ...'
      end
      # verify the required parameter 'address_version' is set
      if @api_client.config.client_side_validation && address_version.nil?
        fail ArgumentError, "Missing the required parameter 'address_version' when calling CoreApi.get_virtual_machine_network_interface_available_ips_address_version"
      end
      # resource path
      local_var_path = '/virtual_machine_network_interfaces/:virtual_machine_network_interface/available_ips/:address_version'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'address_version'] = address_version
      query_params[:'virtual_machine_network_interface[id]'] = opts[:'virtual_machine_network_interface_id'] if !opts[:'virtual_machine_network_interface_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetVirtualMachineNetworkInterfaceAvailableIpsAddressVersion200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_virtual_machine_network_interface_available_ips_address_version",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_virtual_machine_network_interface_available_ips_address_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :virtual_machine_id All &#39;virtual_machine[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :virtual_machine_fqdn All &#39;virtual_machine[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [GetVirtualMachineNetworkInterfaces200Response]
    def get_virtual_machine_network_interfaces(opts = {})
      data, _status_code, _headers = get_virtual_machine_network_interfaces_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :virtual_machine_id All &#39;virtual_machine[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :virtual_machine_fqdn All &#39;virtual_machine[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [Array<(GetVirtualMachineNetworkInterfaces200Response, Integer, Hash)>] GetVirtualMachineNetworkInterfaces200Response data, response status code and response headers
    def get_virtual_machine_network_interfaces_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_virtual_machine_network_interfaces ...'
      end
      # resource path
      local_var_path = '/virtual_machines/:virtual_machine/network_interfaces'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'virtual_machine[id]'] = opts[:'virtual_machine_id'] if !opts[:'virtual_machine_id'].nil?
      query_params[:'virtual_machine[fqdn]'] = opts[:'virtual_machine_fqdn'] if !opts[:'virtual_machine_fqdn'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetVirtualMachineNetworkInterfaces200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_virtual_machine_network_interfaces",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_virtual_machine_network_interfaces\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :virtual_machine_network_interface_id All &#39;virtual_machine_network_interface[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetVirtualMachineNetworkInterfacesVirtualMachineNetworkInterface200Response]
    def get_virtual_machine_network_interfaces_virtual_machine_network_interface(opts = {})
      data, _status_code, _headers = get_virtual_machine_network_interfaces_virtual_machine_network_interface_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :virtual_machine_network_interface_id All &#39;virtual_machine_network_interface[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetVirtualMachineNetworkInterfacesVirtualMachineNetworkInterface200Response, Integer, Hash)>] GetVirtualMachineNetworkInterfacesVirtualMachineNetworkInterface200Response data, response status code and response headers
    def get_virtual_machine_network_interfaces_virtual_machine_network_interface_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_virtual_machine_network_interfaces_virtual_machine_network_interface ...'
      end
      # resource path
      local_var_path = '/virtual_machine_network_interfaces/:virtual_machine_network_interface'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'virtual_machine_network_interface[id]'] = opts[:'virtual_machine_network_interface_id'] if !opts[:'virtual_machine_network_interface_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetVirtualMachineNetworkInterfacesVirtualMachineNetworkInterface200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_virtual_machine_network_interfaces_virtual_machine_network_interface",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_virtual_machine_network_interfaces_virtual_machine_network_interface\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :virtual_machine_package_id All &#39;virtual_machine_package[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :virtual_machine_package_permalink All &#39;virtual_machine_package[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetVirtualMachinePackage200Response]
    def get_virtual_machine_package(opts = {})
      data, _status_code, _headers = get_virtual_machine_package_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :virtual_machine_package_id All &#39;virtual_machine_package[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :virtual_machine_package_permalink All &#39;virtual_machine_package[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetVirtualMachinePackage200Response, Integer, Hash)>] GetVirtualMachinePackage200Response data, response status code and response headers
    def get_virtual_machine_package_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_virtual_machine_package ...'
      end
      # resource path
      local_var_path = '/virtual_machine_packages/:virtual_machine_package'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'virtual_machine_package[id]'] = opts[:'virtual_machine_package_id'] if !opts[:'virtual_machine_package_id'].nil?
      query_params[:'virtual_machine_package[permalink]'] = opts[:'virtual_machine_package_permalink'] if !opts[:'virtual_machine_package_permalink'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetVirtualMachinePackage200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_virtual_machine_package",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_virtual_machine_package\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [GetVirtualMachinePackages200Response]
    def get_virtual_machine_packages(opts = {})
      data, _status_code, _headers = get_virtual_machine_packages_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :organization_sub_domain All &#39;organization[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [Integer] :page 
    # @option opts [Integer] :per_page 
    # @return [Array<(GetVirtualMachinePackages200Response, Integer, Hash)>] GetVirtualMachinePackages200Response data, response status code and response headers
    def get_virtual_machine_packages_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_virtual_machine_packages ...'
      end
      # resource path
      local_var_path = '/virtual_machine_packages'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'organization[id]'] = opts[:'organization_id'] if !opts[:'organization_id'].nil?
      query_params[:'organization[sub_domain]'] = opts[:'organization_sub_domain'] if !opts[:'organization_sub_domain'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetVirtualMachinePackages200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_virtual_machine_packages",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_virtual_machine_packages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :virtual_machine_build_id All &#39;virtual_machine_build[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetVirtualMachinesBuildsVirtualMachineBuild200Response]
    def get_virtual_machines_builds_virtual_machine_build(opts = {})
      data, _status_code, _headers = get_virtual_machines_builds_virtual_machine_build_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :virtual_machine_build_id All &#39;virtual_machine_build[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetVirtualMachinesBuildsVirtualMachineBuild200Response, Integer, Hash)>] GetVirtualMachinesBuildsVirtualMachineBuild200Response data, response status code and response headers
    def get_virtual_machines_builds_virtual_machine_build_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_virtual_machines_builds_virtual_machine_build ...'
      end
      # resource path
      local_var_path = '/virtual_machines/builds/:virtual_machine_build'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'virtual_machine_build[id]'] = opts[:'virtual_machine_build_id'] if !opts[:'virtual_machine_build_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetVirtualMachinesBuildsVirtualMachineBuild200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_virtual_machines_builds_virtual_machine_build",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_virtual_machines_builds_virtual_machine_build\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :zone_id All &#39;zone[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :zone_permalink All &#39;zone[]&#39; params are mutually exclusive, only one can be provided.
    # @return [GetZone200Response]
    def get_zone(opts = {})
      data, _status_code, _headers = get_zone_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :zone_id All &#39;zone[]&#39; params are mutually exclusive, only one can be provided.
    # @option opts [String] :zone_permalink All &#39;zone[]&#39; params are mutually exclusive, only one can be provided.
    # @return [Array<(GetZone200Response, Integer, Hash)>] GetZone200Response data, response status code and response headers
    def get_zone_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_zone ...'
      end
      # resource path
      local_var_path = '/zones/:zone'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'zone[id]'] = opts[:'zone_id'] if !opts[:'zone_id'].nil?
      query_params[:'zone[permalink]'] = opts[:'zone_permalink'] if !opts[:'zone_permalink'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetZone200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_zone",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @return [GetZones200Response]
    def get_zones(opts = {})
      data, _status_code, _headers = get_zones_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(GetZones200Response, Integer, Hash)>] GetZones200Response data, response status code and response headers
    def get_zones_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.get_zones ...'
      end
      # resource path
      local_var_path = '/zones'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetZones200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.get_zones",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#get_zones\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PatchDiskBackupPolicyRequest] :patch_disk_backup_policy_request 
    # @return [PatchDiskBackupPolicy200Response]
    def patch_disk_backup_policy(opts = {})
      data, _status_code, _headers = patch_disk_backup_policy_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PatchDiskBackupPolicyRequest] :patch_disk_backup_policy_request 
    # @return [Array<(PatchDiskBackupPolicy200Response, Integer, Hash)>] PatchDiskBackupPolicy200Response data, response status code and response headers
    def patch_disk_backup_policy_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.patch_disk_backup_policy ...'
      end
      # resource path
      local_var_path = '/disk_backup_policies/:disk_backup_policy'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'patch_disk_backup_policy_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PatchDiskBackupPolicy200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.patch_disk_backup_policy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#patch_disk_backup_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PatchDnsRecordRequest] :patch_dns_record_request 
    # @return [PostDnsZoneRecords200Response]
    def patch_dns_record(opts = {})
      data, _status_code, _headers = patch_dns_record_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PatchDnsRecordRequest] :patch_dns_record_request 
    # @return [Array<(PostDnsZoneRecords200Response, Integer, Hash)>] PostDnsZoneRecords200Response data, response status code and response headers
    def patch_dns_record_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.patch_dns_record ...'
      end
      # resource path
      local_var_path = '/dns_records/:dns_record'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'patch_dns_record_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostDnsZoneRecords200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.patch_dns_record",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#patch_dns_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PatchDnsRecordsDnsRecordRequest] :patch_dns_records_dns_record_request 
    # @return [PatchDnsRecordsDnsRecord200Response]
    def patch_dns_records_dns_record(opts = {})
      data, _status_code, _headers = patch_dns_records_dns_record_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PatchDnsRecordsDnsRecordRequest] :patch_dns_records_dns_record_request 
    # @return [Array<(PatchDnsRecordsDnsRecord200Response, Integer, Hash)>] PatchDnsRecordsDnsRecord200Response data, response status code and response headers
    def patch_dns_records_dns_record_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.patch_dns_records_dns_record ...'
      end
      # resource path
      local_var_path = '/dns/records/:dns_record'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'patch_dns_records_dns_record_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PatchDnsRecordsDnsRecord200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.patch_dns_records_dns_record",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#patch_dns_records_dns_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PatchDnsZoneRequest] :patch_dns_zone_request 
    # @return [GetDnsZonesDnsZone200Response]
    def patch_dns_zone(opts = {})
      data, _status_code, _headers = patch_dns_zone_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PatchDnsZoneRequest] :patch_dns_zone_request 
    # @return [Array<(GetDnsZonesDnsZone200Response, Integer, Hash)>] GetDnsZonesDnsZone200Response data, response status code and response headers
    def patch_dns_zone_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.patch_dns_zone ...'
      end
      # resource path
      local_var_path = '/dns_zones/:dns_zone'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'patch_dns_zone_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'GetDnsZonesDnsZone200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.patch_dns_zone",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#patch_dns_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PatchFileStorageVolumeRequest] :patch_file_storage_volume_request 
    # @return [PatchFileStorageVolume200Response]
    def patch_file_storage_volume(opts = {})
      data, _status_code, _headers = patch_file_storage_volume_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PatchFileStorageVolumeRequest] :patch_file_storage_volume_request 
    # @return [Array<(PatchFileStorageVolume200Response, Integer, Hash)>] PatchFileStorageVolume200Response data, response status code and response headers
    def patch_file_storage_volume_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.patch_file_storage_volume ...'
      end
      # resource path
      local_var_path = '/file_storage_volumes/:file_storage_volume'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'patch_file_storage_volume_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PatchFileStorageVolume200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.patch_file_storage_volume",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#patch_file_storage_volume\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PatchIpAddressRequest] :patch_ip_address_request 
    # @return [PostVirtualMachineAllocateIp200Response]
    def patch_ip_address(opts = {})
      data, _status_code, _headers = patch_ip_address_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PatchIpAddressRequest] :patch_ip_address_request 
    # @return [Array<(PostVirtualMachineAllocateIp200Response, Integer, Hash)>] PostVirtualMachineAllocateIp200Response data, response status code and response headers
    def patch_ip_address_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.patch_ip_address ...'
      end
      # resource path
      local_var_path = '/ip_addresses/:ip_address'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'patch_ip_address_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostVirtualMachineAllocateIp200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.patch_ip_address",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#patch_ip_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PatchLoadBalancerRequest] :patch_load_balancer_request 
    # @return [PatchLoadBalancer200Response]
    def patch_load_balancer(opts = {})
      data, _status_code, _headers = patch_load_balancer_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PatchLoadBalancerRequest] :patch_load_balancer_request 
    # @return [Array<(PatchLoadBalancer200Response, Integer, Hash)>] PatchLoadBalancer200Response data, response status code and response headers
    def patch_load_balancer_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.patch_load_balancer ...'
      end
      # resource path
      local_var_path = '/load_balancers/:load_balancer'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'patch_load_balancer_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PatchLoadBalancer200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.patch_load_balancer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#patch_load_balancer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PatchLoadBalancersRulesLoadBalancerRuleRequest] :patch_load_balancers_rules_load_balancer_rule_request 
    # @return [PatchLoadBalancersRulesLoadBalancerRule200Response]
    def patch_load_balancers_rules_load_balancer_rule(opts = {})
      data, _status_code, _headers = patch_load_balancers_rules_load_balancer_rule_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PatchLoadBalancersRulesLoadBalancerRuleRequest] :patch_load_balancers_rules_load_balancer_rule_request 
    # @return [Array<(PatchLoadBalancersRulesLoadBalancerRule200Response, Integer, Hash)>] PatchLoadBalancersRulesLoadBalancerRule200Response data, response status code and response headers
    def patch_load_balancers_rules_load_balancer_rule_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.patch_load_balancers_rules_load_balancer_rule ...'
      end
      # resource path
      local_var_path = '/load_balancers/rules/:load_balancer_rule'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'patch_load_balancers_rules_load_balancer_rule_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PatchLoadBalancersRulesLoadBalancerRule200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.patch_load_balancers_rules_load_balancer_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#patch_load_balancers_rules_load_balancer_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PatchSecurityGroupRequest] :patch_security_group_request 
    # @return [PostOrganizationSecurityGroups200Response]
    def patch_security_group(opts = {})
      data, _status_code, _headers = patch_security_group_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PatchSecurityGroupRequest] :patch_security_group_request 
    # @return [Array<(PostOrganizationSecurityGroups200Response, Integer, Hash)>] PostOrganizationSecurityGroups200Response data, response status code and response headers
    def patch_security_group_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.patch_security_group ...'
      end
      # resource path
      local_var_path = '/security_groups/:security_group'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'patch_security_group_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostOrganizationSecurityGroups200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.patch_security_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#patch_security_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PatchSecurityGroupsRulesSecurityGroupRuleRequest] :patch_security_groups_rules_security_group_rule_request 
    # @return [PatchSecurityGroupsRulesSecurityGroupRule200Response]
    def patch_security_groups_rules_security_group_rule(opts = {})
      data, _status_code, _headers = patch_security_groups_rules_security_group_rule_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PatchSecurityGroupsRulesSecurityGroupRuleRequest] :patch_security_groups_rules_security_group_rule_request 
    # @return [Array<(PatchSecurityGroupsRulesSecurityGroupRule200Response, Integer, Hash)>] PatchSecurityGroupsRulesSecurityGroupRule200Response data, response status code and response headers
    def patch_security_groups_rules_security_group_rule_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.patch_security_groups_rules_security_group_rule ...'
      end
      # resource path
      local_var_path = '/security_groups/rules/:security_group_rule'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'patch_security_groups_rules_security_group_rule_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PatchSecurityGroupsRulesSecurityGroupRule200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.patch_security_groups_rules_security_group_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#patch_security_groups_rules_security_group_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PatchTagRequest] :patch_tag_request 
    # @return [PostOrganizationTags200Response]
    def patch_tag(opts = {})
      data, _status_code, _headers = patch_tag_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PatchTagRequest] :patch_tag_request 
    # @return [Array<(PostOrganizationTags200Response, Integer, Hash)>] PostOrganizationTags200Response data, response status code and response headers
    def patch_tag_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.patch_tag ...'
      end
      # resource path
      local_var_path = '/tags/:tag'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'patch_tag_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostOrganizationTags200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.patch_tag",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#patch_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PatchVirtualMachineRequest] :patch_virtual_machine_request 
    # @return [PatchVirtualMachine200Response]
    def patch_virtual_machine(opts = {})
      data, _status_code, _headers = patch_virtual_machine_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PatchVirtualMachineRequest] :patch_virtual_machine_request 
    # @return [Array<(PatchVirtualMachine200Response, Integer, Hash)>] PatchVirtualMachine200Response data, response status code and response headers
    def patch_virtual_machine_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.patch_virtual_machine ...'
      end
      # resource path
      local_var_path = '/virtual_machines/:virtual_machine'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'patch_virtual_machine_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PatchVirtualMachine200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.patch_virtual_machine",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#patch_virtual_machine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PatchVirtualMachineGroupRequest] :patch_virtual_machine_group_request 
    # @return [PostOrganizationVirtualMachineGroups200Response]
    def patch_virtual_machine_group(opts = {})
      data, _status_code, _headers = patch_virtual_machine_group_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PatchVirtualMachineGroupRequest] :patch_virtual_machine_group_request 
    # @return [Array<(PostOrganizationVirtualMachineGroups200Response, Integer, Hash)>] PostOrganizationVirtualMachineGroups200Response data, response status code and response headers
    def patch_virtual_machine_group_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.patch_virtual_machine_group ...'
      end
      # resource path
      local_var_path = '/virtual_machine_groups/:virtual_machine_group'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'patch_virtual_machine_group_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostOrganizationVirtualMachineGroups200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.patch_virtual_machine_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#patch_virtual_machine_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PatchVirtualMachineNetworkInterfaceUpdateSpeedProfileRequest] :patch_virtual_machine_network_interface_update_speed_profile_request 
    # @return [PutVirtualMachinePackage200Response]
    def patch_virtual_machine_network_interface_update_speed_profile(opts = {})
      data, _status_code, _headers = patch_virtual_machine_network_interface_update_speed_profile_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PatchVirtualMachineNetworkInterfaceUpdateSpeedProfileRequest] :patch_virtual_machine_network_interface_update_speed_profile_request 
    # @return [Array<(PutVirtualMachinePackage200Response, Integer, Hash)>] PutVirtualMachinePackage200Response data, response status code and response headers
    def patch_virtual_machine_network_interface_update_speed_profile_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.patch_virtual_machine_network_interface_update_speed_profile ...'
      end
      # resource path
      local_var_path = '/virtual_machine_network_interfaces/:virtual_machine_network_interface/update_speed_profile'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'patch_virtual_machine_network_interface_update_speed_profile_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PutVirtualMachinePackage200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.patch_virtual_machine_network_interface_update_speed_profile",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#patch_virtual_machine_network_interface_update_speed_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostDiskDiskBackupPoliciesRequest] :post_disk_disk_backup_policies_request 
    # @return [PostDiskDiskBackupPolicies200Response]
    def post_disk_disk_backup_policies(opts = {})
      data, _status_code, _headers = post_disk_disk_backup_policies_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostDiskDiskBackupPoliciesRequest] :post_disk_disk_backup_policies_request 
    # @return [Array<(PostDiskDiskBackupPolicies200Response, Integer, Hash)>] PostDiskDiskBackupPolicies200Response data, response status code and response headers
    def post_disk_disk_backup_policies_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.post_disk_disk_backup_policies ...'
      end
      # resource path
      local_var_path = '/disks/:disk/disk_backup_policies'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_disk_disk_backup_policies_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostDiskDiskBackupPolicies200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.post_disk_disk_backup_policies",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#post_disk_disk_backup_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostDnsZoneRecordsRequest] :post_dns_zone_records_request 
    # @return [PostDnsZoneRecords200Response]
    def post_dns_zone_records(opts = {})
      data, _status_code, _headers = post_dns_zone_records_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostDnsZoneRecordsRequest] :post_dns_zone_records_request 
    # @return [Array<(PostDnsZoneRecords200Response, Integer, Hash)>] PostDnsZoneRecords200Response data, response status code and response headers
    def post_dns_zone_records_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.post_dns_zone_records ...'
      end
      # resource path
      local_var_path = '/dns_zones/:dns_zone/records'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_dns_zone_records_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostDnsZoneRecords200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.post_dns_zone_records",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#post_dns_zone_records\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteDnsZonesDnsZoneRequest] :delete_dns_zones_dns_zone_request 
    # @return [GetDnsZonesDnsZone200Response]
    def post_dns_zone_verify(opts = {})
      data, _status_code, _headers = post_dns_zone_verify_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteDnsZonesDnsZoneRequest] :delete_dns_zones_dns_zone_request 
    # @return [Array<(GetDnsZonesDnsZone200Response, Integer, Hash)>] GetDnsZonesDnsZone200Response data, response status code and response headers
    def post_dns_zone_verify_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.post_dns_zone_verify ...'
      end
      # resource path
      local_var_path = '/dns_zones/:dns_zone/verify'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'delete_dns_zones_dns_zone_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'GetDnsZonesDnsZone200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.post_dns_zone_verify",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#post_dns_zone_verify\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostDnsZonesDnsZoneRecordsRequest] :post_dns_zones_dns_zone_records_request 
    # @return [PostDnsZonesDnsZoneRecords200Response]
    def post_dns_zones_dns_zone_records(opts = {})
      data, _status_code, _headers = post_dns_zones_dns_zone_records_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostDnsZonesDnsZoneRecordsRequest] :post_dns_zones_dns_zone_records_request 
    # @return [Array<(PostDnsZonesDnsZoneRecords200Response, Integer, Hash)>] PostDnsZonesDnsZoneRecords200Response data, response status code and response headers
    def post_dns_zones_dns_zone_records_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.post_dns_zones_dns_zone_records ...'
      end
      # resource path
      local_var_path = '/dns/zones/:dns_zone/records'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_dns_zones_dns_zone_records_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostDnsZonesDnsZoneRecords200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.post_dns_zones_dns_zone_records",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#post_dns_zones_dns_zone_records\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostDnsZonesDnsZoneUpdateTtlRequest] :post_dns_zones_dns_zone_update_ttl_request 
    # @return [PostDnsZonesDnsZoneUpdateTtl200Response]
    def post_dns_zones_dns_zone_update_ttl(opts = {})
      data, _status_code, _headers = post_dns_zones_dns_zone_update_ttl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostDnsZonesDnsZoneUpdateTtlRequest] :post_dns_zones_dns_zone_update_ttl_request 
    # @return [Array<(PostDnsZonesDnsZoneUpdateTtl200Response, Integer, Hash)>] PostDnsZonesDnsZoneUpdateTtl200Response data, response status code and response headers
    def post_dns_zones_dns_zone_update_ttl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.post_dns_zones_dns_zone_update_ttl ...'
      end
      # resource path
      local_var_path = '/dns/zones/:dns_zone/update_ttl'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_dns_zones_dns_zone_update_ttl_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostDnsZonesDnsZoneUpdateTtl200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.post_dns_zones_dns_zone_update_ttl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#post_dns_zones_dns_zone_update_ttl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteDnsZonesDnsZoneRequest] :delete_dns_zones_dns_zone_request 
    # @return [GetDnsZonesDnsZone200Response]
    def post_dns_zones_dns_zone_verify(opts = {})
      data, _status_code, _headers = post_dns_zones_dns_zone_verify_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteDnsZonesDnsZoneRequest] :delete_dns_zones_dns_zone_request 
    # @return [Array<(GetDnsZonesDnsZone200Response, Integer, Hash)>] GetDnsZonesDnsZone200Response data, response status code and response headers
    def post_dns_zones_dns_zone_verify_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.post_dns_zones_dns_zone_verify ...'
      end
      # resource path
      local_var_path = '/dns/zones/:dns_zone/verify'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'delete_dns_zones_dns_zone_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'GetDnsZonesDnsZone200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.post_dns_zones_dns_zone_verify",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#post_dns_zones_dns_zone_verify\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body 
    # @return [PostInvalidateLinkedWebSession200Response]
    def post_invalidate_linked_web_session(opts = {})
      data, _status_code, _headers = post_invalidate_linked_web_session_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body 
    # @return [Array<(PostInvalidateLinkedWebSession200Response, Integer, Hash)>] PostInvalidateLinkedWebSession200Response data, response status code and response headers
    def post_invalidate_linked_web_session_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.post_invalidate_linked_web_session ...'
      end
      # resource path
      local_var_path = '/invalidate_linked_web_session'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostInvalidateLinkedWebSession200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.post_invalidate_linked_web_session",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#post_invalidate_linked_web_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteIpAddressRequest] :delete_ip_address_request 
    # @return [Object]
    def post_ip_address_unallocate(opts = {})
      data, _status_code, _headers = post_ip_address_unallocate_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteIpAddressRequest] :delete_ip_address_request 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def post_ip_address_unallocate_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.post_ip_address_unallocate ...'
      end
      # resource path
      local_var_path = '/ip_addresses/:ip_address/unallocate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'delete_ip_address_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.post_ip_address_unallocate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#post_ip_address_unallocate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostLoadBalancerRulesRequest] :post_load_balancer_rules_request 
    # @return [PostLoadBalancerRules200Response]
    def post_load_balancer_rules(opts = {})
      data, _status_code, _headers = post_load_balancer_rules_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostLoadBalancerRulesRequest] :post_load_balancer_rules_request 
    # @return [Array<(PostLoadBalancerRules200Response, Integer, Hash)>] PostLoadBalancerRules200Response data, response status code and response headers
    def post_load_balancer_rules_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.post_load_balancer_rules ...'
      end
      # resource path
      local_var_path = '/load_balancers/:load_balancer/rules'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_load_balancer_rules_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostLoadBalancerRules200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.post_load_balancer_rules",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#post_load_balancer_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostOrganizationDnsZonesRequest] :post_organization_dns_zones_request 
    # @return [PostOrganizationDnsZones201Response]
    def post_organization_dns_zones(opts = {})
      data, _status_code, _headers = post_organization_dns_zones_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostOrganizationDnsZonesRequest] :post_organization_dns_zones_request 
    # @return [Array<(PostOrganizationDnsZones201Response, Integer, Hash)>] PostOrganizationDnsZones201Response data, response status code and response headers
    def post_organization_dns_zones_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.post_organization_dns_zones ...'
      end
      # resource path
      local_var_path = '/organizations/:organization/dns/zones'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_organization_dns_zones_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostOrganizationDnsZones201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.post_organization_dns_zones",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#post_organization_dns_zones\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostOrganizationFileStorageVolumesRequest] :post_organization_file_storage_volumes_request 
    # @return [PostOrganizationFileStorageVolumes201Response]
    def post_organization_file_storage_volumes(opts = {})
      data, _status_code, _headers = post_organization_file_storage_volumes_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostOrganizationFileStorageVolumesRequest] :post_organization_file_storage_volumes_request 
    # @return [Array<(PostOrganizationFileStorageVolumes201Response, Integer, Hash)>] PostOrganizationFileStorageVolumes201Response data, response status code and response headers
    def post_organization_file_storage_volumes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.post_organization_file_storage_volumes ...'
      end
      # resource path
      local_var_path = '/organizations/:organization/file_storage_volumes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_organization_file_storage_volumes_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostOrganizationFileStorageVolumes201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.post_organization_file_storage_volumes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#post_organization_file_storage_volumes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostOrganizationIpAddressesRequest] :post_organization_ip_addresses_request 
    # @return [PostVirtualMachineAllocateIp200Response]
    def post_organization_ip_addresses(opts = {})
      data, _status_code, _headers = post_organization_ip_addresses_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostOrganizationIpAddressesRequest] :post_organization_ip_addresses_request 
    # @return [Array<(PostVirtualMachineAllocateIp200Response, Integer, Hash)>] PostVirtualMachineAllocateIp200Response data, response status code and response headers
    def post_organization_ip_addresses_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.post_organization_ip_addresses ...'
      end
      # resource path
      local_var_path = '/organizations/:organization/ip_addresses'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_organization_ip_addresses_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostVirtualMachineAllocateIp200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.post_organization_ip_addresses",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#post_organization_ip_addresses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostOrganizationLoadBalancersRequest] :post_organization_load_balancers_request 
    # @return [PostOrganizationLoadBalancers200Response]
    def post_organization_load_balancers(opts = {})
      data, _status_code, _headers = post_organization_load_balancers_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostOrganizationLoadBalancersRequest] :post_organization_load_balancers_request 
    # @return [Array<(PostOrganizationLoadBalancers200Response, Integer, Hash)>] PostOrganizationLoadBalancers200Response data, response status code and response headers
    def post_organization_load_balancers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.post_organization_load_balancers ...'
      end
      # resource path
      local_var_path = '/organizations/:organization/load_balancers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_organization_load_balancers_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostOrganizationLoadBalancers200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.post_organization_load_balancers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#post_organization_load_balancers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostOrganizationManagedRequest] :post_organization_managed_request 
    # @return [PostOrganizationManaged201Response]
    def post_organization_managed(opts = {})
      data, _status_code, _headers = post_organization_managed_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostOrganizationManagedRequest] :post_organization_managed_request 
    # @return [Array<(PostOrganizationManaged201Response, Integer, Hash)>] PostOrganizationManaged201Response data, response status code and response headers
    def post_organization_managed_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.post_organization_managed ...'
      end
      # resource path
      local_var_path = '/organizations/:organization/managed'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_organization_managed_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostOrganizationManaged201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.post_organization_managed",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#post_organization_managed\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostOrganizationSecurityGroupsRequest] :post_organization_security_groups_request 
    # @return [PostOrganizationSecurityGroups200Response]
    def post_organization_security_groups(opts = {})
      data, _status_code, _headers = post_organization_security_groups_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostOrganizationSecurityGroupsRequest] :post_organization_security_groups_request 
    # @return [Array<(PostOrganizationSecurityGroups200Response, Integer, Hash)>] PostOrganizationSecurityGroups200Response data, response status code and response headers
    def post_organization_security_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.post_organization_security_groups ...'
      end
      # resource path
      local_var_path = '/organizations/:organization/security_groups'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_organization_security_groups_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostOrganizationSecurityGroups200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.post_organization_security_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#post_organization_security_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostOrganizationSshKeysRequest] :post_organization_ssh_keys_request 
    # @return [PostOrganizationSshKeys201Response]
    def post_organization_ssh_keys(opts = {})
      data, _status_code, _headers = post_organization_ssh_keys_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostOrganizationSshKeysRequest] :post_organization_ssh_keys_request 
    # @return [Array<(PostOrganizationSshKeys201Response, Integer, Hash)>] PostOrganizationSshKeys201Response data, response status code and response headers
    def post_organization_ssh_keys_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.post_organization_ssh_keys ...'
      end
      # resource path
      local_var_path = '/organizations/:organization/ssh_keys'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_organization_ssh_keys_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostOrganizationSshKeys201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.post_organization_ssh_keys",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#post_organization_ssh_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostOrganizationTagsRequest] :post_organization_tags_request 
    # @return [PostOrganizationTags200Response]
    def post_organization_tags(opts = {})
      data, _status_code, _headers = post_organization_tags_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostOrganizationTagsRequest] :post_organization_tags_request 
    # @return [Array<(PostOrganizationTags200Response, Integer, Hash)>] PostOrganizationTags200Response data, response status code and response headers
    def post_organization_tags_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.post_organization_tags ...'
      end
      # resource path
      local_var_path = '/organizations/:organization/tags'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_organization_tags_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostOrganizationTags200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.post_organization_tags",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#post_organization_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostOrganizationTrashObjectsPurgeAllRequest] :post_organization_trash_objects_purge_all_request 
    # @return [PutVirtualMachinePackage200Response]
    def post_organization_trash_objects_purge_all(opts = {})
      data, _status_code, _headers = post_organization_trash_objects_purge_all_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostOrganizationTrashObjectsPurgeAllRequest] :post_organization_trash_objects_purge_all_request 
    # @return [Array<(PutVirtualMachinePackage200Response, Integer, Hash)>] PutVirtualMachinePackage200Response data, response status code and response headers
    def post_organization_trash_objects_purge_all_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.post_organization_trash_objects_purge_all ...'
      end
      # resource path
      local_var_path = '/organizations/:organization/trash_objects/purge_all'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_organization_trash_objects_purge_all_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PutVirtualMachinePackage200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.post_organization_trash_objects_purge_all",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#post_organization_trash_objects_purge_all\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostOrganizationVirtualMachineGroupsRequest] :post_organization_virtual_machine_groups_request 
    # @return [PostOrganizationVirtualMachineGroups200Response]
    def post_organization_virtual_machine_groups(opts = {})
      data, _status_code, _headers = post_organization_virtual_machine_groups_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostOrganizationVirtualMachineGroupsRequest] :post_organization_virtual_machine_groups_request 
    # @return [Array<(PostOrganizationVirtualMachineGroups200Response, Integer, Hash)>] PostOrganizationVirtualMachineGroups200Response data, response status code and response headers
    def post_organization_virtual_machine_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.post_organization_virtual_machine_groups ...'
      end
      # resource path
      local_var_path = '/organizations/:organization/virtual_machine_groups'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_organization_virtual_machine_groups_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostOrganizationVirtualMachineGroups200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.post_organization_virtual_machine_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#post_organization_virtual_machine_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostOrganizationVirtualMachinesBuildRequest] :post_organization_virtual_machines_build_request 
    # @return [PostOrganizationVirtualMachinesBuild201Response]
    def post_organization_virtual_machines_build(opts = {})
      data, _status_code, _headers = post_organization_virtual_machines_build_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostOrganizationVirtualMachinesBuildRequest] :post_organization_virtual_machines_build_request 
    # @return [Array<(PostOrganizationVirtualMachinesBuild201Response, Integer, Hash)>] PostOrganizationVirtualMachinesBuild201Response data, response status code and response headers
    def post_organization_virtual_machines_build_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.post_organization_virtual_machines_build ...'
      end
      # resource path
      local_var_path = '/organizations/:organization/virtual_machines/build'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_organization_virtual_machines_build_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostOrganizationVirtualMachinesBuild201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.post_organization_virtual_machines_build",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#post_organization_virtual_machines_build\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostOrganizationVirtualMachinesBuildFromSpecRequest] :post_organization_virtual_machines_build_from_spec_request 
    # @return [PostOrganizationVirtualMachinesBuildFromSpec201Response]
    def post_organization_virtual_machines_build_from_spec(opts = {})
      data, _status_code, _headers = post_organization_virtual_machines_build_from_spec_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostOrganizationVirtualMachinesBuildFromSpecRequest] :post_organization_virtual_machines_build_from_spec_request 
    # @return [Array<(PostOrganizationVirtualMachinesBuildFromSpec201Response, Integer, Hash)>] PostOrganizationVirtualMachinesBuildFromSpec201Response data, response status code and response headers
    def post_organization_virtual_machines_build_from_spec_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.post_organization_virtual_machines_build_from_spec ...'
      end
      # resource path
      local_var_path = '/organizations/:organization/virtual_machines/build_from_spec'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_organization_virtual_machines_build_from_spec_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostOrganizationVirtualMachinesBuildFromSpec201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.post_organization_virtual_machines_build_from_spec",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#post_organization_virtual_machines_build_from_spec\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostOrganizationsOrganizationDnsZonesRequest] :post_organizations_organization_dns_zones_request 
    # @return [PostOrganizationsOrganizationDnsZones201Response]
    def post_organizations_organization_dns_zones(opts = {})
      data, _status_code, _headers = post_organizations_organization_dns_zones_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostOrganizationsOrganizationDnsZonesRequest] :post_organizations_organization_dns_zones_request 
    # @return [Array<(PostOrganizationsOrganizationDnsZones201Response, Integer, Hash)>] PostOrganizationsOrganizationDnsZones201Response data, response status code and response headers
    def post_organizations_organization_dns_zones_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.post_organizations_organization_dns_zones ...'
      end
      # resource path
      local_var_path = '/organizations/:organization/dns_zones'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_organizations_organization_dns_zones_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostOrganizationsOrganizationDnsZones201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.post_organizations_organization_dns_zones",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#post_organizations_organization_dns_zones\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostSecurityGroupRulesRequest] :post_security_group_rules_request 
    # @return [PostSecurityGroupRules200Response]
    def post_security_group_rules(opts = {})
      data, _status_code, _headers = post_security_group_rules_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostSecurityGroupRulesRequest] :post_security_group_rules_request 
    # @return [Array<(PostSecurityGroupRules200Response, Integer, Hash)>] PostSecurityGroupRules200Response data, response status code and response headers
    def post_security_group_rules_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.post_security_group_rules ...'
      end
      # resource path
      local_var_path = '/security_groups/:security_group/rules'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_security_group_rules_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostSecurityGroupRules200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.post_security_group_rules",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#post_security_group_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteTrashObjectRequest] :delete_trash_object_request 
    # @return [GetTrashObject200Response]
    def post_trash_object_restore(opts = {})
      data, _status_code, _headers = post_trash_object_restore_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeleteTrashObjectRequest] :delete_trash_object_request 
    # @return [Array<(GetTrashObject200Response, Integer, Hash)>] GetTrashObject200Response data, response status code and response headers
    def post_trash_object_restore_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.post_trash_object_restore ...'
      end
      # resource path
      local_var_path = '/trash_objects/:trash_object/restore'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'delete_trash_object_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'GetTrashObject200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.post_trash_object_restore",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#post_trash_object_restore\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostVirtualMachineAllocateIpRequest] :post_virtual_machine_allocate_ip_request 
    # @return [PostVirtualMachineAllocateIp200Response]
    def post_virtual_machine_allocate_ip(opts = {})
      data, _status_code, _headers = post_virtual_machine_allocate_ip_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostVirtualMachineAllocateIpRequest] :post_virtual_machine_allocate_ip_request 
    # @return [Array<(PostVirtualMachineAllocateIp200Response, Integer, Hash)>] PostVirtualMachineAllocateIp200Response data, response status code and response headers
    def post_virtual_machine_allocate_ip_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.post_virtual_machine_allocate_ip ...'
      end
      # resource path
      local_var_path = '/virtual_machines/:virtual_machine/allocate_ip'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_virtual_machine_allocate_ip_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostVirtualMachineAllocateIp200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.post_virtual_machine_allocate_ip",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#post_virtual_machine_allocate_ip\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostVirtualMachineStartRequest] :post_virtual_machine_start_request 
    # @return [PostVirtualMachineConsoleSessions201Response]
    def post_virtual_machine_console_sessions(opts = {})
      data, _status_code, _headers = post_virtual_machine_console_sessions_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostVirtualMachineStartRequest] :post_virtual_machine_start_request 
    # @return [Array<(PostVirtualMachineConsoleSessions201Response, Integer, Hash)>] PostVirtualMachineConsoleSessions201Response data, response status code and response headers
    def post_virtual_machine_console_sessions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.post_virtual_machine_console_sessions ...'
      end
      # resource path
      local_var_path = '/virtual_machines/:virtual_machine/console_sessions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_virtual_machine_start_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostVirtualMachineConsoleSessions201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.post_virtual_machine_console_sessions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#post_virtual_machine_console_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostVirtualMachineDiskBackupPoliciesRequest] :post_virtual_machine_disk_backup_policies_request 
    # @return [PostVirtualMachineDiskBackupPolicies200Response]
    def post_virtual_machine_disk_backup_policies(opts = {})
      data, _status_code, _headers = post_virtual_machine_disk_backup_policies_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostVirtualMachineDiskBackupPoliciesRequest] :post_virtual_machine_disk_backup_policies_request 
    # @return [Array<(PostVirtualMachineDiskBackupPolicies200Response, Integer, Hash)>] PostVirtualMachineDiskBackupPolicies200Response data, response status code and response headers
    def post_virtual_machine_disk_backup_policies_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.post_virtual_machine_disk_backup_policies ...'
      end
      # resource path
      local_var_path = '/virtual_machines/:virtual_machine/disk_backup_policies'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_virtual_machine_disk_backup_policies_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostVirtualMachineDiskBackupPolicies200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.post_virtual_machine_disk_backup_policies",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#post_virtual_machine_disk_backup_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostVirtualMachineNetworkInterfaceAllocateIpRequest] :post_virtual_machine_network_interface_allocate_ip_request 
    # @return [PostVirtualMachineNetworkInterfaceAllocateIp200Response]
    def post_virtual_machine_network_interface_allocate_ip(opts = {})
      data, _status_code, _headers = post_virtual_machine_network_interface_allocate_ip_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostVirtualMachineNetworkInterfaceAllocateIpRequest] :post_virtual_machine_network_interface_allocate_ip_request 
    # @return [Array<(PostVirtualMachineNetworkInterfaceAllocateIp200Response, Integer, Hash)>] PostVirtualMachineNetworkInterfaceAllocateIp200Response data, response status code and response headers
    def post_virtual_machine_network_interface_allocate_ip_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.post_virtual_machine_network_interface_allocate_ip ...'
      end
      # resource path
      local_var_path = '/virtual_machine_network_interfaces/:virtual_machine_network_interface/allocate_ip'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_virtual_machine_network_interface_allocate_ip_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostVirtualMachineNetworkInterfaceAllocateIp200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.post_virtual_machine_network_interface_allocate_ip",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#post_virtual_machine_network_interface_allocate_ip\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostVirtualMachineNetworkInterfaceAllocateNewIpRequest] :post_virtual_machine_network_interface_allocate_new_ip_request 
    # @return [PostVirtualMachineAllocateIp200Response]
    def post_virtual_machine_network_interface_allocate_new_ip(opts = {})
      data, _status_code, _headers = post_virtual_machine_network_interface_allocate_new_ip_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostVirtualMachineNetworkInterfaceAllocateNewIpRequest] :post_virtual_machine_network_interface_allocate_new_ip_request 
    # @return [Array<(PostVirtualMachineAllocateIp200Response, Integer, Hash)>] PostVirtualMachineAllocateIp200Response data, response status code and response headers
    def post_virtual_machine_network_interface_allocate_new_ip_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.post_virtual_machine_network_interface_allocate_new_ip ...'
      end
      # resource path
      local_var_path = '/virtual_machine_network_interfaces/:virtual_machine_network_interface/allocate_new_ip'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_virtual_machine_network_interface_allocate_new_ip_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostVirtualMachineAllocateIp200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.post_virtual_machine_network_interface_allocate_new_ip",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#post_virtual_machine_network_interface_allocate_new_ip\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostVirtualMachineStartRequest] :post_virtual_machine_start_request 
    # @return [PostVirtualMachineReset200Response]
    def post_virtual_machine_reset(opts = {})
      data, _status_code, _headers = post_virtual_machine_reset_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostVirtualMachineStartRequest] :post_virtual_machine_start_request 
    # @return [Array<(PostVirtualMachineReset200Response, Integer, Hash)>] PostVirtualMachineReset200Response data, response status code and response headers
    def post_virtual_machine_reset_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.post_virtual_machine_reset ...'
      end
      # resource path
      local_var_path = '/virtual_machines/:virtual_machine/reset'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_virtual_machine_start_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostVirtualMachineReset200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.post_virtual_machine_reset",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#post_virtual_machine_reset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostVirtualMachineStartRequest] :post_virtual_machine_start_request 
    # @return [PostVirtualMachineShutdown200Response]
    def post_virtual_machine_shutdown(opts = {})
      data, _status_code, _headers = post_virtual_machine_shutdown_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostVirtualMachineStartRequest] :post_virtual_machine_start_request 
    # @return [Array<(PostVirtualMachineShutdown200Response, Integer, Hash)>] PostVirtualMachineShutdown200Response data, response status code and response headers
    def post_virtual_machine_shutdown_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.post_virtual_machine_shutdown ...'
      end
      # resource path
      local_var_path = '/virtual_machines/:virtual_machine/shutdown'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_virtual_machine_start_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostVirtualMachineShutdown200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.post_virtual_machine_shutdown",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#post_virtual_machine_shutdown\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostVirtualMachineStartRequest] :post_virtual_machine_start_request 
    # @return [PostVirtualMachineStart200Response]
    def post_virtual_machine_start(opts = {})
      data, _status_code, _headers = post_virtual_machine_start_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostVirtualMachineStartRequest] :post_virtual_machine_start_request 
    # @return [Array<(PostVirtualMachineStart200Response, Integer, Hash)>] PostVirtualMachineStart200Response data, response status code and response headers
    def post_virtual_machine_start_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.post_virtual_machine_start ...'
      end
      # resource path
      local_var_path = '/virtual_machines/:virtual_machine/start'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_virtual_machine_start_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostVirtualMachineStart200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.post_virtual_machine_start",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#post_virtual_machine_start\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostVirtualMachineStartRequest] :post_virtual_machine_start_request 
    # @return [PostVirtualMachineStop200Response]
    def post_virtual_machine_stop(opts = {})
      data, _status_code, _headers = post_virtual_machine_stop_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PostVirtualMachineStartRequest] :post_virtual_machine_start_request 
    # @return [Array<(PostVirtualMachineStop200Response, Integer, Hash)>] PostVirtualMachineStop200Response data, response status code and response headers
    def post_virtual_machine_stop_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.post_virtual_machine_stop ...'
      end
      # resource path
      local_var_path = '/virtual_machines/:virtual_machine/stop'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_virtual_machine_start_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostVirtualMachineStop200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.post_virtual_machine_stop",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#post_virtual_machine_stop\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PutVirtualMachineFlexibleResourcesRequest] :put_virtual_machine_flexible_resources_request 
    # @return [PutVirtualMachinePackage200Response]
    def put_virtual_machine_flexible_resources(opts = {})
      data, _status_code, _headers = put_virtual_machine_flexible_resources_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PutVirtualMachineFlexibleResourcesRequest] :put_virtual_machine_flexible_resources_request 
    # @return [Array<(PutVirtualMachinePackage200Response, Integer, Hash)>] PutVirtualMachinePackage200Response data, response status code and response headers
    def put_virtual_machine_flexible_resources_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.put_virtual_machine_flexible_resources ...'
      end
      # resource path
      local_var_path = '/virtual_machines/:virtual_machine/flexible_resources'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'put_virtual_machine_flexible_resources_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PutVirtualMachinePackage200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.put_virtual_machine_flexible_resources",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#put_virtual_machine_flexible_resources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PutVirtualMachinePackageRequest] :put_virtual_machine_package_request 
    # @return [PutVirtualMachinePackage200Response]
    def put_virtual_machine_package(opts = {})
      data, _status_code, _headers = put_virtual_machine_package_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PutVirtualMachinePackageRequest] :put_virtual_machine_package_request 
    # @return [Array<(PutVirtualMachinePackage200Response, Integer, Hash)>] PutVirtualMachinePackage200Response data, response status code and response headers
    def put_virtual_machine_package_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CoreApi.put_virtual_machine_package ...'
      end
      # resource path
      local_var_path = '/virtual_machines/:virtual_machine/package'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'put_virtual_machine_package_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PutVirtualMachinePackage200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authenticator']

      new_options = opts.merge(
        :operation => :"CoreApi.put_virtual_machine_package",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CoreApi#put_virtual_machine_package\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

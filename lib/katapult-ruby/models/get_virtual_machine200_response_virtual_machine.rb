=begin
#Katapult Core API

#Welcome to the documentation for the Katapult Core API

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.1.0

=end

require 'date'
require 'time'

module KatapultAPI
  class GetVirtualMachine200ResponseVirtualMachine
    attr_accessor :id

    attr_accessor :name

    attr_accessor :hostname

    attr_accessor :fqdn

    attr_accessor :description

    attr_accessor :created_at

    attr_accessor :initial_root_password

    attr_accessor :state

    attr_accessor :zone

    attr_accessor :organization

    attr_accessor :group

    attr_accessor :package

    attr_accessor :attached_iso

    attr_accessor :memory_in_gb

    attr_accessor :cpu_cores

    attr_accessor :gpu_type

    attr_accessor :gpus

    attr_accessor :tags

    attr_accessor :tag_names

    attr_accessor :ip_addresses

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'name' => :'name',
        :'hostname' => :'hostname',
        :'fqdn' => :'fqdn',
        :'description' => :'description',
        :'created_at' => :'created_at',
        :'initial_root_password' => :'initial_root_password',
        :'state' => :'state',
        :'zone' => :'zone',
        :'organization' => :'organization',
        :'group' => :'group',
        :'package' => :'package',
        :'attached_iso' => :'attached_iso',
        :'memory_in_gb' => :'memory_in_gb',
        :'cpu_cores' => :'cpu_cores',
        :'gpu_type' => :'gpu_type',
        :'gpus' => :'gpus',
        :'tags' => :'tags',
        :'tag_names' => :'tag_names',
        :'ip_addresses' => :'ip_addresses'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'name' => :'String',
        :'hostname' => :'String',
        :'fqdn' => :'String',
        :'description' => :'String',
        :'created_at' => :'Integer',
        :'initial_root_password' => :'String',
        :'state' => :'VirtualMachineStateEnum',
        :'zone' => :'GetVirtualMachinePartZone',
        :'organization' => :'GetVirtualMachinePartOrganization',
        :'group' => :'GetVirtualMachinePartGroup',
        :'package' => :'GetVirtualMachinePartPackage',
        :'attached_iso' => :'GetVirtualMachinePartAttachedISO',
        :'memory_in_gb' => :'Integer',
        :'cpu_cores' => :'Integer',
        :'gpu_type' => :'GetVirtualMachinePartGPUType',
        :'gpus' => :'Array<GetVirtualMachinePartGPUs>',
        :'tags' => :'Array<GetVirtualMachinePartTags>',
        :'tag_names' => :'Array<String>',
        :'ip_addresses' => :'Array<GetVirtualMachinePartIPAddresses>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `KatapultAPI::GetVirtualMachine200ResponseVirtualMachine` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `KatapultAPI::GetVirtualMachine200ResponseVirtualMachine`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'hostname')
        self.hostname = attributes[:'hostname']
      end

      if attributes.key?(:'fqdn')
        self.fqdn = attributes[:'fqdn']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'initial_root_password')
        self.initial_root_password = attributes[:'initial_root_password']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'zone')
        self.zone = attributes[:'zone']
      end

      if attributes.key?(:'organization')
        self.organization = attributes[:'organization']
      end

      if attributes.key?(:'group')
        self.group = attributes[:'group']
      end

      if attributes.key?(:'package')
        self.package = attributes[:'package']
      end

      if attributes.key?(:'attached_iso')
        self.attached_iso = attributes[:'attached_iso']
      end

      if attributes.key?(:'memory_in_gb')
        self.memory_in_gb = attributes[:'memory_in_gb']
      end

      if attributes.key?(:'cpu_cores')
        self.cpu_cores = attributes[:'cpu_cores']
      end

      if attributes.key?(:'gpu_type')
        self.gpu_type = attributes[:'gpu_type']
      end

      if attributes.key?(:'gpus')
        if (value = attributes[:'gpus']).is_a?(Array)
          self.gpus = value
        end
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'tag_names')
        if (value = attributes[:'tag_names']).is_a?(Array)
          self.tag_names = value
        end
      end

      if attributes.key?(:'ip_addresses')
        if (value = attributes[:'ip_addresses']).is_a?(Array)
          self.ip_addresses = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          hostname == o.hostname &&
          fqdn == o.fqdn &&
          description == o.description &&
          created_at == o.created_at &&
          initial_root_password == o.initial_root_password &&
          state == o.state &&
          zone == o.zone &&
          organization == o.organization &&
          group == o.group &&
          package == o.package &&
          attached_iso == o.attached_iso &&
          memory_in_gb == o.memory_in_gb &&
          cpu_cores == o.cpu_cores &&
          gpu_type == o.gpu_type &&
          gpus == o.gpus &&
          tags == o.tags &&
          tag_names == o.tag_names &&
          ip_addresses == o.ip_addresses
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, name, hostname, fqdn, description, created_at, initial_root_password, state, zone, organization, group, package, attached_iso, memory_in_gb, cpu_cores, gpu_type, gpus, tags, tag_names, ip_addresses].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = KatapultAPI.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end

=begin
#Katapult Core API

#Welcome to the documentation for the Katapult Core API

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.1.0

=end

require 'date'
require 'time'

module KatapultAPI
  class OrganizationPolicy
    attr_accessor :maximum_uninvoiced_balance

    attr_accessor :maximum_virtual_machines

    attr_accessor :maximum_virtual_machine_memory

    attr_accessor :maximum_disk_space

    attr_accessor :maximum_managed_organizations

    attr_accessor :maximum_unallocated_ip_addresses

    attr_accessor :maximum_security_groups

    attr_accessor :maximum_virtual_networks

    attr_accessor :maximum_load_balancers

    attr_accessor :maximum_dns_zones

    attr_accessor :maximum_certificates

    attr_accessor :maximum_file_storage_volumes

    attr_accessor :maximum_isos

    attr_accessor :flexible_virtual_machine_resources

    attr_accessor :allow_suspension

    attr_accessor :allow_restricted_traffic_types

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'maximum_uninvoiced_balance' => :'maximum_uninvoiced_balance',
        :'maximum_virtual_machines' => :'maximum_virtual_machines',
        :'maximum_virtual_machine_memory' => :'maximum_virtual_machine_memory',
        :'maximum_disk_space' => :'maximum_disk_space',
        :'maximum_managed_organizations' => :'maximum_managed_organizations',
        :'maximum_unallocated_ip_addresses' => :'maximum_unallocated_ip_addresses',
        :'maximum_security_groups' => :'maximum_security_groups',
        :'maximum_virtual_networks' => :'maximum_virtual_networks',
        :'maximum_load_balancers' => :'maximum_load_balancers',
        :'maximum_dns_zones' => :'maximum_dns_zones',
        :'maximum_certificates' => :'maximum_certificates',
        :'maximum_file_storage_volumes' => :'maximum_file_storage_volumes',
        :'maximum_isos' => :'maximum_isos',
        :'flexible_virtual_machine_resources' => :'flexible_virtual_machine_resources',
        :'allow_suspension' => :'allow_suspension',
        :'allow_restricted_traffic_types' => :'allow_restricted_traffic_types'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'maximum_uninvoiced_balance' => :'DecimalOrUnlimited',
        :'maximum_virtual_machines' => :'IntegerOrUnlimited',
        :'maximum_virtual_machine_memory' => :'IntegerOrUnlimited',
        :'maximum_disk_space' => :'IntegerOrUnlimited',
        :'maximum_managed_organizations' => :'IntegerOrUnlimited',
        :'maximum_unallocated_ip_addresses' => :'IntegerOrUnlimited',
        :'maximum_security_groups' => :'IntegerOrUnlimited',
        :'maximum_virtual_networks' => :'IntegerOrUnlimited',
        :'maximum_load_balancers' => :'IntegerOrUnlimited',
        :'maximum_dns_zones' => :'IntegerOrUnlimited',
        :'maximum_certificates' => :'IntegerOrUnlimited',
        :'maximum_file_storage_volumes' => :'IntegerOrUnlimited',
        :'maximum_isos' => :'IntegerOrUnlimited',
        :'flexible_virtual_machine_resources' => :'Boolean',
        :'allow_suspension' => :'Boolean',
        :'allow_restricted_traffic_types' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `KatapultAPI::OrganizationPolicy` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `KatapultAPI::OrganizationPolicy`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'maximum_uninvoiced_balance')
        self.maximum_uninvoiced_balance = attributes[:'maximum_uninvoiced_balance']
      end

      if attributes.key?(:'maximum_virtual_machines')
        self.maximum_virtual_machines = attributes[:'maximum_virtual_machines']
      end

      if attributes.key?(:'maximum_virtual_machine_memory')
        self.maximum_virtual_machine_memory = attributes[:'maximum_virtual_machine_memory']
      end

      if attributes.key?(:'maximum_disk_space')
        self.maximum_disk_space = attributes[:'maximum_disk_space']
      end

      if attributes.key?(:'maximum_managed_organizations')
        self.maximum_managed_organizations = attributes[:'maximum_managed_organizations']
      end

      if attributes.key?(:'maximum_unallocated_ip_addresses')
        self.maximum_unallocated_ip_addresses = attributes[:'maximum_unallocated_ip_addresses']
      end

      if attributes.key?(:'maximum_security_groups')
        self.maximum_security_groups = attributes[:'maximum_security_groups']
      end

      if attributes.key?(:'maximum_virtual_networks')
        self.maximum_virtual_networks = attributes[:'maximum_virtual_networks']
      end

      if attributes.key?(:'maximum_load_balancers')
        self.maximum_load_balancers = attributes[:'maximum_load_balancers']
      end

      if attributes.key?(:'maximum_dns_zones')
        self.maximum_dns_zones = attributes[:'maximum_dns_zones']
      end

      if attributes.key?(:'maximum_certificates')
        self.maximum_certificates = attributes[:'maximum_certificates']
      end

      if attributes.key?(:'maximum_file_storage_volumes')
        self.maximum_file_storage_volumes = attributes[:'maximum_file_storage_volumes']
      end

      if attributes.key?(:'maximum_isos')
        self.maximum_isos = attributes[:'maximum_isos']
      end

      if attributes.key?(:'flexible_virtual_machine_resources')
        self.flexible_virtual_machine_resources = attributes[:'flexible_virtual_machine_resources']
      end

      if attributes.key?(:'allow_suspension')
        self.allow_suspension = attributes[:'allow_suspension']
      end

      if attributes.key?(:'allow_restricted_traffic_types')
        self.allow_restricted_traffic_types = attributes[:'allow_restricted_traffic_types']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          maximum_uninvoiced_balance == o.maximum_uninvoiced_balance &&
          maximum_virtual_machines == o.maximum_virtual_machines &&
          maximum_virtual_machine_memory == o.maximum_virtual_machine_memory &&
          maximum_disk_space == o.maximum_disk_space &&
          maximum_managed_organizations == o.maximum_managed_organizations &&
          maximum_unallocated_ip_addresses == o.maximum_unallocated_ip_addresses &&
          maximum_security_groups == o.maximum_security_groups &&
          maximum_virtual_networks == o.maximum_virtual_networks &&
          maximum_load_balancers == o.maximum_load_balancers &&
          maximum_dns_zones == o.maximum_dns_zones &&
          maximum_certificates == o.maximum_certificates &&
          maximum_file_storage_volumes == o.maximum_file_storage_volumes &&
          maximum_isos == o.maximum_isos &&
          flexible_virtual_machine_resources == o.flexible_virtual_machine_resources &&
          allow_suspension == o.allow_suspension &&
          allow_restricted_traffic_types == o.allow_restricted_traffic_types
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [maximum_uninvoiced_balance, maximum_virtual_machines, maximum_virtual_machine_memory, maximum_disk_space, maximum_managed_organizations, maximum_unallocated_ip_addresses, maximum_security_groups, maximum_virtual_networks, maximum_load_balancers, maximum_dns_zones, maximum_certificates, maximum_file_storage_volumes, maximum_isos, flexible_virtual_machine_resources, allow_suspension, allow_restricted_traffic_types].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = KatapultAPI.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end

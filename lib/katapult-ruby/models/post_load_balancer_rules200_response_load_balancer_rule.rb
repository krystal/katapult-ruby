=begin
#Katapult Core API

#Welcome to the documentation for the Katapult Core API

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.1.0

=end

require 'date'
require 'time'

module KatapultAPI
  class PostLoadBalancerRules200ResponseLoadBalancerRule
    attr_accessor :id

    attr_accessor :algorithm

    attr_accessor :destination_port

    attr_accessor :listen_port

    attr_accessor :protocol

    attr_accessor :proxy_protocol

    attr_accessor :certificates

    attr_accessor :backend_ssl

    attr_accessor :passthrough_ssl

    attr_accessor :check_enabled

    attr_accessor :check_fall

    attr_accessor :check_interval

    attr_accessor :check_path

    attr_accessor :check_protocol

    attr_accessor :check_rise

    attr_accessor :check_timeout

    attr_accessor :check_http_statuses

    attr_accessor :load_balancer

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'algorithm' => :'algorithm',
        :'destination_port' => :'destination_port',
        :'listen_port' => :'listen_port',
        :'protocol' => :'protocol',
        :'proxy_protocol' => :'proxy_protocol',
        :'certificates' => :'certificates',
        :'backend_ssl' => :'backend_ssl',
        :'passthrough_ssl' => :'passthrough_ssl',
        :'check_enabled' => :'check_enabled',
        :'check_fall' => :'check_fall',
        :'check_interval' => :'check_interval',
        :'check_path' => :'check_path',
        :'check_protocol' => :'check_protocol',
        :'check_rise' => :'check_rise',
        :'check_timeout' => :'check_timeout',
        :'check_http_statuses' => :'check_http_statuses',
        :'load_balancer' => :'load_balancer'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'algorithm' => :'LoadBalancerRuleAlgorithmEnum',
        :'destination_port' => :'Integer',
        :'listen_port' => :'Integer',
        :'protocol' => :'LoadBalancerRuleProtocolEnum',
        :'proxy_protocol' => :'Boolean',
        :'certificates' => :'Array<PostLoadBalancerRulesPartCertificates>',
        :'backend_ssl' => :'Boolean',
        :'passthrough_ssl' => :'Boolean',
        :'check_enabled' => :'Boolean',
        :'check_fall' => :'Integer',
        :'check_interval' => :'Integer',
        :'check_path' => :'String',
        :'check_protocol' => :'LoadBalancerRuleCheckProtocolEnum',
        :'check_rise' => :'Integer',
        :'check_timeout' => :'Integer',
        :'check_http_statuses' => :'LoadBalancerRuleHTTPStatusesEnum',
        :'load_balancer' => :'PostLoadBalancerRulesPartLoadBalancer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'check_protocol',
        :'check_http_statuses',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `KatapultAPI::PostLoadBalancerRules200ResponseLoadBalancerRule` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `KatapultAPI::PostLoadBalancerRules200ResponseLoadBalancerRule`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'algorithm')
        self.algorithm = attributes[:'algorithm']
      end

      if attributes.key?(:'destination_port')
        self.destination_port = attributes[:'destination_port']
      end

      if attributes.key?(:'listen_port')
        self.listen_port = attributes[:'listen_port']
      end

      if attributes.key?(:'protocol')
        self.protocol = attributes[:'protocol']
      end

      if attributes.key?(:'proxy_protocol')
        self.proxy_protocol = attributes[:'proxy_protocol']
      end

      if attributes.key?(:'certificates')
        if (value = attributes[:'certificates']).is_a?(Array)
          self.certificates = value
        end
      end

      if attributes.key?(:'backend_ssl')
        self.backend_ssl = attributes[:'backend_ssl']
      end

      if attributes.key?(:'passthrough_ssl')
        self.passthrough_ssl = attributes[:'passthrough_ssl']
      end

      if attributes.key?(:'check_enabled')
        self.check_enabled = attributes[:'check_enabled']
      end

      if attributes.key?(:'check_fall')
        self.check_fall = attributes[:'check_fall']
      end

      if attributes.key?(:'check_interval')
        self.check_interval = attributes[:'check_interval']
      end

      if attributes.key?(:'check_path')
        self.check_path = attributes[:'check_path']
      end

      if attributes.key?(:'check_protocol')
        self.check_protocol = attributes[:'check_protocol']
      end

      if attributes.key?(:'check_rise')
        self.check_rise = attributes[:'check_rise']
      end

      if attributes.key?(:'check_timeout')
        self.check_timeout = attributes[:'check_timeout']
      end

      if attributes.key?(:'check_http_statuses')
        self.check_http_statuses = attributes[:'check_http_statuses']
      end

      if attributes.key?(:'load_balancer')
        self.load_balancer = attributes[:'load_balancer']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          algorithm == o.algorithm &&
          destination_port == o.destination_port &&
          listen_port == o.listen_port &&
          protocol == o.protocol &&
          proxy_protocol == o.proxy_protocol &&
          certificates == o.certificates &&
          backend_ssl == o.backend_ssl &&
          passthrough_ssl == o.passthrough_ssl &&
          check_enabled == o.check_enabled &&
          check_fall == o.check_fall &&
          check_interval == o.check_interval &&
          check_path == o.check_path &&
          check_protocol == o.check_protocol &&
          check_rise == o.check_rise &&
          check_timeout == o.check_timeout &&
          check_http_statuses == o.check_http_statuses &&
          load_balancer == o.load_balancer
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, algorithm, destination_port, listen_port, protocol, proxy_protocol, certificates, backend_ssl, passthrough_ssl, check_enabled, check_fall, check_interval, check_path, check_protocol, check_rise, check_timeout, check_http_statuses, load_balancer].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = KatapultAPI.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
